<?php


/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class WebSite {
  static $_TSPEC;

  public $website_id = null;
  public $website_name = null;
  public $media_id = null;
  public $media_name = null;
  public $uid = null;
  public $description = null;
  public $website_url = null;
  public $status = null;
  public $insert_time = null;
  public $update_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'website_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'website_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'media_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'media_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'website_url',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'insert_time',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'update_time',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['website_id'])) {
        $this->website_id = $vals['website_id'];
      }
      if (isset($vals['website_name'])) {
        $this->website_name = $vals['website_name'];
      }
      if (isset($vals['media_id'])) {
        $this->media_id = $vals['media_id'];
      }
      if (isset($vals['media_name'])) {
        $this->media_name = $vals['media_name'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['website_url'])) {
        $this->website_url = $vals['website_url'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['insert_time'])) {
        $this->insert_time = $vals['insert_time'];
      }
      if (isset($vals['update_time'])) {
        $this->update_time = $vals['update_time'];
      }
    }
  }

  public function getName() {
    return 'WebSite';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->website_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->website_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->media_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->media_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->website_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->insert_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->update_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WebSite');
    if ($this->website_id !== null) {
      $xfer += $output->writeFieldBegin('website_id', TType::I32, 1);
      $xfer += $output->writeI32($this->website_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->website_name !== null) {
      $xfer += $output->writeFieldBegin('website_name', TType::STRING, 2);
      $xfer += $output->writeString($this->website_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_id !== null) {
      $xfer += $output->writeFieldBegin('media_id', TType::I32, 3);
      $xfer += $output->writeI32($this->media_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_name !== null) {
      $xfer += $output->writeFieldBegin('media_name', TType::STRING, 4);
      $xfer += $output->writeString($this->media_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 5);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 6);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->website_url !== null) {
      $xfer += $output->writeFieldBegin('website_url', TType::STRING, 7);
      $xfer += $output->writeString($this->website_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 8);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->insert_time !== null) {
      $xfer += $output->writeFieldBegin('insert_time', TType::STRING, 17);
      $xfer += $output->writeString($this->insert_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->update_time !== null) {
      $xfer += $output->writeFieldBegin('update_time', TType::STRING, 18);
      $xfer += $output->writeString($this->update_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SspSlotAdnetwork {
  static $_TSPEC;

  public $slot_id = null;
  public $network_id = null;
  public $network_name = null;
  public $network_ratio = null;
  public $network_code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'slot_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'network_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'network_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'network_ratio',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'network_code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['slot_id'])) {
        $this->slot_id = $vals['slot_id'];
      }
      if (isset($vals['network_id'])) {
        $this->network_id = $vals['network_id'];
      }
      if (isset($vals['network_name'])) {
        $this->network_name = $vals['network_name'];
      }
      if (isset($vals['network_ratio'])) {
        $this->network_ratio = $vals['network_ratio'];
      }
      if (isset($vals['network_code'])) {
        $this->network_code = $vals['network_code'];
      }
    }
  }

  public function getName() {
    return 'SspSlotAdnetwork';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->slot_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->network_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->network_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->network_ratio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->network_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SspSlotAdnetwork');
    if ($this->slot_id !== null) {
      $xfer += $output->writeFieldBegin('slot_id', TType::I32, 1);
      $xfer += $output->writeI32($this->slot_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->network_id !== null) {
      $xfer += $output->writeFieldBegin('network_id', TType::I32, 2);
      $xfer += $output->writeI32($this->network_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->network_name !== null) {
      $xfer += $output->writeFieldBegin('network_name', TType::STRING, 3);
      $xfer += $output->writeString($this->network_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->network_ratio !== null) {
      $xfer += $output->writeFieldBegin('network_ratio', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->network_ratio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->network_code !== null) {
      $xfer += $output->writeFieldBegin('network_code', TType::STRING, 5);
      $xfer += $output->writeString($this->network_code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SlotData {
  static $_TSPEC;

  public $slot_id = null;
  public $slot_name = null;
  public $uid = null;
  public $website_id = null;
  public $width = null;
  public $height = null;
  public $style = null;
  public $url = null;
  public $view_screen = null;
  public $min_price = null;
  public $priority = null;
  public $creative_type = null;
  public $ad_list = null;
  public $status = null;
  public $ad_type = null;
  public $comment = null;
  public $insert_time = null;
  public $update_time = null;
  public $ad_network = null;
  public $channel = null;
  public $ban_urls = null;
  public $ban_dsp = null;
  public $ban_category = null;
  public $view_type = null;
  public $priority_ratio = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'slot_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'slot_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'website_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'width',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'height',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'style',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'view_screen',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'min_price',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'priority',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'creative_type',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'ad_list',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'ad_type',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'insert_time',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'update_time',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'ad_network',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SspSlotAdnetwork',
            ),
          ),
        20 => array(
          'var' => 'channel',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        21 => array(
          'var' => 'ban_urls',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        22 => array(
          'var' => 'ban_dsp',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        23 => array(
          'var' => 'ban_category',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        24 => array(
          'var' => 'view_type',
          'type' => TType::I32,
          ),
        25 => array(
          'var' => 'priority_ratio',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['slot_id'])) {
        $this->slot_id = $vals['slot_id'];
      }
      if (isset($vals['slot_name'])) {
        $this->slot_name = $vals['slot_name'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['website_id'])) {
        $this->website_id = $vals['website_id'];
      }
      if (isset($vals['width'])) {
        $this->width = $vals['width'];
      }
      if (isset($vals['height'])) {
        $this->height = $vals['height'];
      }
      if (isset($vals['style'])) {
        $this->style = $vals['style'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['view_screen'])) {
        $this->view_screen = $vals['view_screen'];
      }
      if (isset($vals['min_price'])) {
        $this->min_price = $vals['min_price'];
      }
      if (isset($vals['priority'])) {
        $this->priority = $vals['priority'];
      }
      if (isset($vals['creative_type'])) {
        $this->creative_type = $vals['creative_type'];
      }
      if (isset($vals['ad_list'])) {
        $this->ad_list = $vals['ad_list'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['ad_type'])) {
        $this->ad_type = $vals['ad_type'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['insert_time'])) {
        $this->insert_time = $vals['insert_time'];
      }
      if (isset($vals['update_time'])) {
        $this->update_time = $vals['update_time'];
      }
      if (isset($vals['ad_network'])) {
        $this->ad_network = $vals['ad_network'];
      }
      if (isset($vals['channel'])) {
        $this->channel = $vals['channel'];
      }
      if (isset($vals['ban_urls'])) {
        $this->ban_urls = $vals['ban_urls'];
      }
      if (isset($vals['ban_dsp'])) {
        $this->ban_dsp = $vals['ban_dsp'];
      }
      if (isset($vals['ban_category'])) {
        $this->ban_category = $vals['ban_category'];
      }
      if (isset($vals['view_type'])) {
        $this->view_type = $vals['view_type'];
      }
      if (isset($vals['priority_ratio'])) {
        $this->priority_ratio = $vals['priority_ratio'];
      }
    }
  }

  public function getName() {
    return 'SlotData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->slot_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->slot_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->website_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->width);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->height);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->style);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->view_screen);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->min_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priority);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->creative_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ad_list);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ad_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->insert_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->update_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::LST) {
            $this->ad_network = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \SspSlotAdnetwork();
              $xfer += $elem5->read($input);
              $this->ad_network []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::LST) {
            $this->channel = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readI32($elem11);
              $this->channel []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::LST) {
            $this->ban_urls = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $xfer += $input->readString($elem17);
              $this->ban_urls []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::LST) {
            $this->ban_dsp = array();
            $_size18 = 0;
            $_etype21 = 0;
            $xfer += $input->readListBegin($_etype21, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $elem23 = null;
              $xfer += $input->readI32($elem23);
              $this->ban_dsp []= $elem23;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::LST) {
            $this->ban_category = array();
            $_size24 = 0;
            $_etype27 = 0;
            $xfer += $input->readListBegin($_etype27, $_size24);
            for ($_i28 = 0; $_i28 < $_size24; ++$_i28)
            {
              $elem29 = null;
              $xfer += $input->readI32($elem29);
              $this->ban_category []= $elem29;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->view_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->priority_ratio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SlotData');
    if ($this->slot_id !== null) {
      $xfer += $output->writeFieldBegin('slot_id', TType::I32, 1);
      $xfer += $output->writeI32($this->slot_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->slot_name !== null) {
      $xfer += $output->writeFieldBegin('slot_name', TType::STRING, 2);
      $xfer += $output->writeString($this->slot_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 3);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->website_id !== null) {
      $xfer += $output->writeFieldBegin('website_id', TType::I32, 4);
      $xfer += $output->writeI32($this->website_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->width !== null) {
      $xfer += $output->writeFieldBegin('width', TType::I32, 5);
      $xfer += $output->writeI32($this->width);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->height !== null) {
      $xfer += $output->writeFieldBegin('height', TType::I32, 6);
      $xfer += $output->writeI32($this->height);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->style !== null) {
      $xfer += $output->writeFieldBegin('style', TType::I32, 7);
      $xfer += $output->writeI32($this->style);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 8);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->view_screen !== null) {
      $xfer += $output->writeFieldBegin('view_screen', TType::I32, 9);
      $xfer += $output->writeI32($this->view_screen);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->min_price !== null) {
      $xfer += $output->writeFieldBegin('min_price', TType::I32, 10);
      $xfer += $output->writeI32($this->min_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priority !== null) {
      $xfer += $output->writeFieldBegin('priority', TType::I32, 11);
      $xfer += $output->writeI32($this->priority);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creative_type !== null) {
      $xfer += $output->writeFieldBegin('creative_type', TType::I32, 12);
      $xfer += $output->writeI32($this->creative_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ad_list !== null) {
      $xfer += $output->writeFieldBegin('ad_list', TType::STRING, 13);
      $xfer += $output->writeString($this->ad_list);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 14);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ad_type !== null) {
      $xfer += $output->writeFieldBegin('ad_type', TType::I32, 15);
      $xfer += $output->writeI32($this->ad_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 16);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->insert_time !== null) {
      $xfer += $output->writeFieldBegin('insert_time', TType::STRING, 17);
      $xfer += $output->writeString($this->insert_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->update_time !== null) {
      $xfer += $output->writeFieldBegin('update_time', TType::STRING, 18);
      $xfer += $output->writeString($this->update_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ad_network !== null) {
      if (!is_array($this->ad_network)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ad_network', TType::LST, 19);
      {
        $output->writeListBegin(TType::STRUCT, count($this->ad_network));
        {
          foreach ($this->ad_network as $iter30)
          {
            $xfer += $iter30->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel !== null) {
      if (!is_array($this->channel)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('channel', TType::LST, 20);
      {
        $output->writeListBegin(TType::I32, count($this->channel));
        {
          foreach ($this->channel as $iter31)
          {
            $xfer += $output->writeI32($iter31);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ban_urls !== null) {
      if (!is_array($this->ban_urls)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ban_urls', TType::LST, 21);
      {
        $output->writeListBegin(TType::STRING, count($this->ban_urls));
        {
          foreach ($this->ban_urls as $iter32)
          {
            $xfer += $output->writeString($iter32);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ban_dsp !== null) {
      if (!is_array($this->ban_dsp)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ban_dsp', TType::LST, 22);
      {
        $output->writeListBegin(TType::I32, count($this->ban_dsp));
        {
          foreach ($this->ban_dsp as $iter33)
          {
            $xfer += $output->writeI32($iter33);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ban_category !== null) {
      if (!is_array($this->ban_category)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ban_category', TType::LST, 23);
      {
        $output->writeListBegin(TType::I32, count($this->ban_category));
        {
          foreach ($this->ban_category as $iter34)
          {
            $xfer += $output->writeI32($iter34);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->view_type !== null) {
      $xfer += $output->writeFieldBegin('view_type', TType::I32, 24);
      $xfer += $output->writeI32($this->view_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priority_ratio !== null) {
      $xfer += $output->writeFieldBegin('priority_ratio', TType::DOUBLE, 25);
      $xfer += $output->writeDouble($this->priority_ratio);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


