<?php


/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class AdGroupPolicy {
  static $_TSPEC;

  public $id = null;
  public $group_id = null;
  public $herd_id = null;
  public $bid_price = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'group_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'herd_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'bid_price',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['group_id'])) {
        $this->group_id = $vals['group_id'];
      }
      if (isset($vals['herd_id'])) {
        $this->herd_id = $vals['herd_id'];
      }
      if (isset($vals['bid_price'])) {
        $this->bid_price = $vals['bid_price'];
      }
    }
  }

  public function getName() {
    return 'AdGroupPolicy';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->group_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->herd_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->bid_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdGroupPolicy');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group_id !== null) {
      $xfer += $output->writeFieldBegin('group_id', TType::I32, 2);
      $xfer += $output->writeI32($this->group_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->herd_id !== null) {
      $xfer += $output->writeFieldBegin('herd_id', TType::I32, 3);
      $xfer += $output->writeI32($this->herd_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bid_price !== null) {
      $xfer += $output->writeFieldBegin('bid_price', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->bid_price);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdGroupHost {
  static $_TSPEC;

  public $id = null;
  public $host = null;
  public $group_id = null;
  public $bid_price = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'host',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'group_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'bid_price',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['group_id'])) {
        $this->group_id = $vals['group_id'];
      }
      if (isset($vals['bid_price'])) {
        $this->bid_price = $vals['bid_price'];
      }
    }
  }

  public function getName() {
    return 'AdGroupHost';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->group_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->bid_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdGroupHost');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 2);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group_id !== null) {
      $xfer += $output->writeFieldBegin('group_id', TType::I32, 3);
      $xfer += $output->writeI32($this->group_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bid_price !== null) {
      $xfer += $output->writeFieldBegin('bid_price', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->bid_price);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdGroup {
  static $_TSPEC;

  public $group_id = null;
  public $name = null;
  public $uid = null;
  public $version = null;
  public $plan_id = null;
  public $start_date = null;
  public $end_date = null;
  public $freq = null;
  public $is_first_page = null;
  public $include_host = null;
  public $exclude_host = null;
  public $area_value = null;
  public $area_lable = null;
  public $enabled =   1;
  public $ctime = null;
  public $mtime = null;
  public $media_type =   1;
  public $bid_price = null;
  public $flow_src =   1;
  public $colum1 = null;
  public $colum2 = null;
  public $media_name = null;
  public $policys = null;
  public $hosts = null;
  public $time_interval = null;
  public $day_num = null;
  public $show_num = null;
  public $host_set_object = null;
  public $include_useragent = null;
  public $include_useragent_set_object = null;
  public $sp_list = null;
  public $keyword_list = null;
  public $mobile = null;
  public $exchanges = null;
  public $include_ip = null;
  public $exclude_ip = null;
  public $include_adsl = null;
  public $exclude_adsl = null;
  public $usertype = null;
  public $usertags = null;
  public $domain_group_id = null;
  public $channels = null;
  public $base_props = null;
  public $residence_locations = null;
  public $work_locations = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'group_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'plan_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'start_date',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'end_date',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'freq',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'is_first_page',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'include_host',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'exclude_host',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'area_value',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'area_lable',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'enabled',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'ctime',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'mtime',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'media_type',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'bid_price',
          'type' => TType::DOUBLE,
          ),
        19 => array(
          'var' => 'flow_src',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'colum1',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'colum2',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'media_name',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'policys',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\AdGroupPolicy',
            ),
          ),
        24 => array(
          'var' => 'hosts',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\AdGroupHost',
            ),
          ),
        25 => array(
          'var' => 'time_interval',
          'type' => TType::I32,
          ),
        26 => array(
          'var' => 'day_num',
          'type' => TType::I32,
          ),
        27 => array(
          'var' => 'show_num',
          'type' => TType::I32,
          ),
        28 => array(
          'var' => 'host_set_object',
          'type' => TType::STRING,
          ),
        29 => array(
          'var' => 'include_useragent',
          'type' => TType::STRING,
          ),
        30 => array(
          'var' => 'include_useragent_set_object',
          'type' => TType::STRING,
          ),
        31 => array(
          'var' => 'sp_list',
          'type' => TType::STRING,
          ),
        32 => array(
          'var' => 'keyword_list',
          'type' => TType::STRING,
          ),
        33 => array(
          'var' => 'mobile',
          'type' => TType::I32,
          ),
        34 => array(
          'var' => 'exchanges',
          'type' => TType::STRING,
          ),
        35 => array(
          'var' => 'include_ip',
          'type' => TType::STRING,
          ),
        36 => array(
          'var' => 'exclude_ip',
          'type' => TType::STRING,
          ),
        37 => array(
          'var' => 'include_adsl',
          'type' => TType::STRING,
          ),
        38 => array(
          'var' => 'exclude_adsl',
          'type' => TType::STRING,
          ),
        39 => array(
          'var' => 'usertype',
          'type' => TType::I32,
          ),
        40 => array(
          'var' => 'usertags',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        41 => array(
          'var' => 'domain_group_id',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        42 => array(
          'var' => 'channels',
          'type' => TType::STRING,
          ),
        43 => array(
          'var' => 'base_props',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        44 => array(
          'var' => 'residence_locations',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        45 => array(
          'var' => 'work_locations',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['group_id'])) {
        $this->group_id = $vals['group_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['plan_id'])) {
        $this->plan_id = $vals['plan_id'];
      }
      if (isset($vals['start_date'])) {
        $this->start_date = $vals['start_date'];
      }
      if (isset($vals['end_date'])) {
        $this->end_date = $vals['end_date'];
      }
      if (isset($vals['freq'])) {
        $this->freq = $vals['freq'];
      }
      if (isset($vals['is_first_page'])) {
        $this->is_first_page = $vals['is_first_page'];
      }
      if (isset($vals['include_host'])) {
        $this->include_host = $vals['include_host'];
      }
      if (isset($vals['exclude_host'])) {
        $this->exclude_host = $vals['exclude_host'];
      }
      if (isset($vals['area_value'])) {
        $this->area_value = $vals['area_value'];
      }
      if (isset($vals['area_lable'])) {
        $this->area_lable = $vals['area_lable'];
      }
      if (isset($vals['enabled'])) {
        $this->enabled = $vals['enabled'];
      }
      if (isset($vals['ctime'])) {
        $this->ctime = $vals['ctime'];
      }
      if (isset($vals['mtime'])) {
        $this->mtime = $vals['mtime'];
      }
      if (isset($vals['media_type'])) {
        $this->media_type = $vals['media_type'];
      }
      if (isset($vals['bid_price'])) {
        $this->bid_price = $vals['bid_price'];
      }
      if (isset($vals['flow_src'])) {
        $this->flow_src = $vals['flow_src'];
      }
      if (isset($vals['colum1'])) {
        $this->colum1 = $vals['colum1'];
      }
      if (isset($vals['colum2'])) {
        $this->colum2 = $vals['colum2'];
      }
      if (isset($vals['media_name'])) {
        $this->media_name = $vals['media_name'];
      }
      if (isset($vals['policys'])) {
        $this->policys = $vals['policys'];
      }
      if (isset($vals['hosts'])) {
        $this->hosts = $vals['hosts'];
      }
      if (isset($vals['time_interval'])) {
        $this->time_interval = $vals['time_interval'];
      }
      if (isset($vals['day_num'])) {
        $this->day_num = $vals['day_num'];
      }
      if (isset($vals['show_num'])) {
        $this->show_num = $vals['show_num'];
      }
      if (isset($vals['host_set_object'])) {
        $this->host_set_object = $vals['host_set_object'];
      }
      if (isset($vals['include_useragent'])) {
        $this->include_useragent = $vals['include_useragent'];
      }
      if (isset($vals['include_useragent_set_object'])) {
        $this->include_useragent_set_object = $vals['include_useragent_set_object'];
      }
      if (isset($vals['sp_list'])) {
        $this->sp_list = $vals['sp_list'];
      }
      if (isset($vals['keyword_list'])) {
        $this->keyword_list = $vals['keyword_list'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['exchanges'])) {
        $this->exchanges = $vals['exchanges'];
      }
      if (isset($vals['include_ip'])) {
        $this->include_ip = $vals['include_ip'];
      }
      if (isset($vals['exclude_ip'])) {
        $this->exclude_ip = $vals['exclude_ip'];
      }
      if (isset($vals['include_adsl'])) {
        $this->include_adsl = $vals['include_adsl'];
      }
      if (isset($vals['exclude_adsl'])) {
        $this->exclude_adsl = $vals['exclude_adsl'];
      }
      if (isset($vals['usertype'])) {
        $this->usertype = $vals['usertype'];
      }
      if (isset($vals['usertags'])) {
        $this->usertags = $vals['usertags'];
      }
      if (isset($vals['domain_group_id'])) {
        $this->domain_group_id = $vals['domain_group_id'];
      }
      if (isset($vals['channels'])) {
        $this->channels = $vals['channels'];
      }
      if (isset($vals['base_props'])) {
        $this->base_props = $vals['base_props'];
      }
      if (isset($vals['residence_locations'])) {
        $this->residence_locations = $vals['residence_locations'];
      }
      if (isset($vals['work_locations'])) {
        $this->work_locations = $vals['work_locations'];
      }
    }
  }

  public function getName() {
    return 'AdGroup';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->group_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->plan_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->start_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->end_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->freq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->is_first_page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->include_host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->exclude_host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->area_value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->area_lable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->enabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ctime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->media_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->bid_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flow_src);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->colum1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->colum2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->media_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::LST) {
            $this->policys = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \AdGroupPolicy();
              $xfer += $elem5->read($input);
              $this->policys []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::LST) {
            $this->hosts = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $elem11 = new \AdGroupHost();
              $xfer += $elem11->read($input);
              $this->hosts []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->time_interval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->day_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->show_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host_set_object);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->include_useragent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->include_useragent_set_object);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sp_list);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->keyword_list);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->exchanges);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->include_ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->exclude_ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 37:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->include_adsl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 38:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->exclude_adsl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 39:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->usertype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::LST) {
            $this->usertags = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $xfer += $input->readString($elem17);
              $this->usertags []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == TType::LST) {
            $this->domain_group_id = array();
            $_size18 = 0;
            $_etype21 = 0;
            $xfer += $input->readListBegin($_etype21, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $elem23 = null;
              $xfer += $input->readI32($elem23);
              $this->domain_group_id []= $elem23;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 42:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channels);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 43:
          if ($ftype == TType::LST) {
            $this->base_props = array();
            $_size24 = 0;
            $_etype27 = 0;
            $xfer += $input->readListBegin($_etype27, $_size24);
            for ($_i28 = 0; $_i28 < $_size24; ++$_i28)
            {
              $elem29 = null;
              $xfer += $input->readString($elem29);
              $this->base_props []= $elem29;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 44:
          if ($ftype == TType::LST) {
            $this->residence_locations = array();
            $_size30 = 0;
            $_etype33 = 0;
            $xfer += $input->readListBegin($_etype33, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $elem35 = null;
              $xfer += $input->readString($elem35);
              $this->residence_locations []= $elem35;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 45:
          if ($ftype == TType::LST) {
            $this->work_locations = array();
            $_size36 = 0;
            $_etype39 = 0;
            $xfer += $input->readListBegin($_etype39, $_size36);
            for ($_i40 = 0; $_i40 < $_size36; ++$_i40)
            {
              $elem41 = null;
              $xfer += $input->readString($elem41);
              $this->work_locations []= $elem41;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdGroup');
    if ($this->group_id !== null) {
      $xfer += $output->writeFieldBegin('group_id', TType::I32, 1);
      $xfer += $output->writeI32($this->group_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 3);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 4);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->plan_id !== null) {
      $xfer += $output->writeFieldBegin('plan_id', TType::I32, 5);
      $xfer += $output->writeI32($this->plan_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_date !== null) {
      $xfer += $output->writeFieldBegin('start_date', TType::I32, 6);
      $xfer += $output->writeI32($this->start_date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_date !== null) {
      $xfer += $output->writeFieldBegin('end_date', TType::I32, 7);
      $xfer += $output->writeI32($this->end_date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->freq !== null) {
      $xfer += $output->writeFieldBegin('freq', TType::I32, 8);
      $xfer += $output->writeI32($this->freq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_first_page !== null) {
      $xfer += $output->writeFieldBegin('is_first_page', TType::I32, 9);
      $xfer += $output->writeI32($this->is_first_page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->include_host !== null) {
      $xfer += $output->writeFieldBegin('include_host', TType::STRING, 10);
      $xfer += $output->writeString($this->include_host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exclude_host !== null) {
      $xfer += $output->writeFieldBegin('exclude_host', TType::STRING, 11);
      $xfer += $output->writeString($this->exclude_host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->area_value !== null) {
      $xfer += $output->writeFieldBegin('area_value', TType::STRING, 12);
      $xfer += $output->writeString($this->area_value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->area_lable !== null) {
      $xfer += $output->writeFieldBegin('area_lable', TType::STRING, 13);
      $xfer += $output->writeString($this->area_lable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enabled !== null) {
      $xfer += $output->writeFieldBegin('enabled', TType::I32, 14);
      $xfer += $output->writeI32($this->enabled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ctime !== null) {
      $xfer += $output->writeFieldBegin('ctime', TType::I32, 15);
      $xfer += $output->writeI32($this->ctime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mtime !== null) {
      $xfer += $output->writeFieldBegin('mtime', TType::I32, 16);
      $xfer += $output->writeI32($this->mtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_type !== null) {
      $xfer += $output->writeFieldBegin('media_type', TType::I32, 17);
      $xfer += $output->writeI32($this->media_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bid_price !== null) {
      $xfer += $output->writeFieldBegin('bid_price', TType::DOUBLE, 18);
      $xfer += $output->writeDouble($this->bid_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flow_src !== null) {
      $xfer += $output->writeFieldBegin('flow_src', TType::I32, 19);
      $xfer += $output->writeI32($this->flow_src);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->colum1 !== null) {
      $xfer += $output->writeFieldBegin('colum1', TType::I32, 20);
      $xfer += $output->writeI32($this->colum1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->colum2 !== null) {
      $xfer += $output->writeFieldBegin('colum2', TType::STRING, 21);
      $xfer += $output->writeString($this->colum2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_name !== null) {
      $xfer += $output->writeFieldBegin('media_name', TType::STRING, 22);
      $xfer += $output->writeString($this->media_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->policys !== null) {
      if (!is_array($this->policys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('policys', TType::LST, 23);
      {
        $output->writeListBegin(TType::STRUCT, count($this->policys));
        {
          foreach ($this->policys as $iter42)
          {
            $xfer += $iter42->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hosts !== null) {
      if (!is_array($this->hosts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hosts', TType::LST, 24);
      {
        $output->writeListBegin(TType::STRUCT, count($this->hosts));
        {
          foreach ($this->hosts as $iter43)
          {
            $xfer += $iter43->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time_interval !== null) {
      $xfer += $output->writeFieldBegin('time_interval', TType::I32, 25);
      $xfer += $output->writeI32($this->time_interval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->day_num !== null) {
      $xfer += $output->writeFieldBegin('day_num', TType::I32, 26);
      $xfer += $output->writeI32($this->day_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->show_num !== null) {
      $xfer += $output->writeFieldBegin('show_num', TType::I32, 27);
      $xfer += $output->writeI32($this->show_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host_set_object !== null) {
      $xfer += $output->writeFieldBegin('host_set_object', TType::STRING, 28);
      $xfer += $output->writeString($this->host_set_object);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->include_useragent !== null) {
      $xfer += $output->writeFieldBegin('include_useragent', TType::STRING, 29);
      $xfer += $output->writeString($this->include_useragent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->include_useragent_set_object !== null) {
      $xfer += $output->writeFieldBegin('include_useragent_set_object', TType::STRING, 30);
      $xfer += $output->writeString($this->include_useragent_set_object);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sp_list !== null) {
      $xfer += $output->writeFieldBegin('sp_list', TType::STRING, 31);
      $xfer += $output->writeString($this->sp_list);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->keyword_list !== null) {
      $xfer += $output->writeFieldBegin('keyword_list', TType::STRING, 32);
      $xfer += $output->writeString($this->keyword_list);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::I32, 33);
      $xfer += $output->writeI32($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exchanges !== null) {
      $xfer += $output->writeFieldBegin('exchanges', TType::STRING, 34);
      $xfer += $output->writeString($this->exchanges);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->include_ip !== null) {
      $xfer += $output->writeFieldBegin('include_ip', TType::STRING, 35);
      $xfer += $output->writeString($this->include_ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exclude_ip !== null) {
      $xfer += $output->writeFieldBegin('exclude_ip', TType::STRING, 36);
      $xfer += $output->writeString($this->exclude_ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->include_adsl !== null) {
      $xfer += $output->writeFieldBegin('include_adsl', TType::STRING, 37);
      $xfer += $output->writeString($this->include_adsl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exclude_adsl !== null) {
      $xfer += $output->writeFieldBegin('exclude_adsl', TType::STRING, 38);
      $xfer += $output->writeString($this->exclude_adsl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usertype !== null) {
      $xfer += $output->writeFieldBegin('usertype', TType::I32, 39);
      $xfer += $output->writeI32($this->usertype);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usertags !== null) {
      if (!is_array($this->usertags)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('usertags', TType::LST, 40);
      {
        $output->writeListBegin(TType::STRING, count($this->usertags));
        {
          foreach ($this->usertags as $iter44)
          {
            $xfer += $output->writeString($iter44);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->domain_group_id !== null) {
      if (!is_array($this->domain_group_id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('domain_group_id', TType::LST, 41);
      {
        $output->writeListBegin(TType::I32, count($this->domain_group_id));
        {
          foreach ($this->domain_group_id as $iter45)
          {
            $xfer += $output->writeI32($iter45);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channels !== null) {
      $xfer += $output->writeFieldBegin('channels', TType::STRING, 42);
      $xfer += $output->writeString($this->channels);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->base_props !== null) {
      if (!is_array($this->base_props)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('base_props', TType::LST, 43);
      {
        $output->writeListBegin(TType::STRING, count($this->base_props));
        {
          foreach ($this->base_props as $iter46)
          {
            $xfer += $output->writeString($iter46);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->residence_locations !== null) {
      if (!is_array($this->residence_locations)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('residence_locations', TType::LST, 44);
      {
        $output->writeListBegin(TType::STRING, count($this->residence_locations));
        {
          foreach ($this->residence_locations as $iter47)
          {
            $xfer += $output->writeString($iter47);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->work_locations !== null) {
      if (!is_array($this->work_locations)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('work_locations', TType::LST, 45);
      {
        $output->writeListBegin(TType::STRING, count($this->work_locations));
        {
          foreach ($this->work_locations as $iter48)
          {
            $xfer += $output->writeString($iter48);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdGroupResponse {
  static $_TSPEC;

  public $totalSize = null;
  public $currentSize = null;
  public $pageSize = null;
  public $pageNumber = null;
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'totalSize',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'currentSize',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'pageNumber',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\AdGroup',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['totalSize'])) {
        $this->totalSize = $vals['totalSize'];
      }
      if (isset($vals['currentSize'])) {
        $this->currentSize = $vals['currentSize'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['pageNumber'])) {
        $this->pageNumber = $vals['pageNumber'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'AdGroupResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->currentSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $elem54 = new \AdGroup();
              $xfer += $elem54->read($input);
              $this->data []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdGroupResponse');
    if ($this->totalSize !== null) {
      $xfer += $output->writeFieldBegin('totalSize', TType::I32, 1);
      $xfer += $output->writeI32($this->totalSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentSize !== null) {
      $xfer += $output->writeFieldBegin('currentSize', TType::I32, 2);
      $xfer += $output->writeI32($this->currentSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 3);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageNumber !== null) {
      $xfer += $output->writeFieldBegin('pageNumber', TType::I32, 4);
      $xfer += $output->writeI32($this->pageNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter55)
          {
            $xfer += $iter55->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


