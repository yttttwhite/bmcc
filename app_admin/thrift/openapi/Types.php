<?php


/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class DataType {
  const RTB = 1;
  const OAS = 2;
  static public $__names = array(
    1 => 'RTB',
    2 => 'OAS',
  );
}

class MediaPrice {
  static $_TSPEC;

  public $media = null;
  public $price = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'media',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'price',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['media'])) {
        $this->media = $vals['media'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
    }
  }

  public function getName() {
    return 'MediaPrice';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->media);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MediaPrice');
    if ($this->media !== null) {
      $xfer += $output->writeFieldBegin('media', TType::STRING, 1);
      $xfer += $output->writeString($this->media);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->price);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PolicyData {
  static $_TSPEC;

  public $policy_id = null;
  public $adid = null;
  public $bid_price = null;
  public $dsp_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'policy_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'adid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'bid_price',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'dsp_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['policy_id'])) {
        $this->policy_id = $vals['policy_id'];
      }
      if (isset($vals['adid'])) {
        $this->adid = $vals['adid'];
      }
      if (isset($vals['bid_price'])) {
        $this->bid_price = $vals['bid_price'];
      }
      if (isset($vals['dsp_name'])) {
        $this->dsp_name = $vals['dsp_name'];
      }
    }
  }

  public function getName() {
    return 'PolicyData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->policy_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->adid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->bid_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dsp_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PolicyData');
    if ($this->policy_id !== null) {
      $xfer += $output->writeFieldBegin('policy_id', TType::I32, 1);
      $xfer += $output->writeI32($this->policy_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->adid !== null) {
      $xfer += $output->writeFieldBegin('adid', TType::I32, 2);
      $xfer += $output->writeI32($this->adid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bid_price !== null) {
      $xfer += $output->writeFieldBegin('bid_price', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->bid_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dsp_name !== null) {
      $xfer += $output->writeFieldBegin('dsp_name', TType::STRING, 4);
      $xfer += $output->writeString($this->dsp_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdData {
  static $_TSPEC;

  public $ad_id = null;
  public $business_type =   20;
  public $width = null;
  public $height = null;
  public $viewtype = null;
  public $priority =   3;
  public $blackurl = null;
  public $whiteurl = null;
  public $regions = null;
  public $acceptflows = null;
  public $creative_type =   1;
  public $ad_category = null;
  public $sensitive_category = null;
  public $click_through_url = null;
  public $destination_url = null;
  public $charge_type =   1;
  public $charge_price = null;
  public $is_general = null;
  public $media_price = null;
  public $sp_id = null;
  public $has_text = null;
  public $params = null;
  public $time_interval = null;
  public $day_num = null;
  public $show_num = null;
  public $type_id = null;
  public $show_js = null;
  public $click_js = null;
  public $is_first_page = null;
  public $group_id = null;
  public $budget = -1;
  public $plan_id = null;
  public $smooth_control = null;
  public $frequency_control = -1;
  public $day_cpm = -1;
  public $day_cpc = -1;
  public $user_agent = null;
  public $sp_list = null;
  public $viewtype4_ratio = 0;
  public $viewtype8_ratio = 0;
  public $terms = array(
  );
  public $mobile = null;
  public $exchanges = null;
  public $isdelay = 0;
  public $include_ip = null;
  public $exclude_ip = null;
  public $include_adsl = null;
  public $exclude_adsl = null;
  public $usertype = null;
  public $usertags = null;
  public $intervals = null;
  public $view_position = null;
  public $view_time = null;
  public $webunion_org = null;
  public $webunion_text = null;
  public $title = null;
  public $description = null;
  public $domain_group_id = null;
  public $channel_list = null;
  public $adname = null;
  public $webunion_switch = null;
  public $base_props = null;
  public $residence_locations = null;
  public $work_locations = null;
  public $icon_addr = null;
  public $icon_width = null;
  public $icon_height = null;
  public $icon_mime_type = null;
  public $mime_type = null;
  public $duration = null;
  public $bitrate = null;
  public $frame_rate = null;
  public $adsource =   1;
  public $contract_type = null;
  public $deeplinkurl = null;
  public $logo_width = null;
  public $logo_height = null;
  public $logo_addr = null;
  public $ad_action = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ad_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'business_type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'width',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'height',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'viewtype',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'priority',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'blackurl',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        8 => array(
          'var' => 'whiteurl',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        9 => array(
          'var' => 'regions',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        10 => array(
          'var' => 'acceptflows',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        11 => array(
          'var' => 'creative_type',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'ad_category',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'sensitive_category',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'click_through_url',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'destination_url',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'charge_type',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'charge_price',
          'type' => TType::DOUBLE,
          ),
        18 => array(
          'var' => 'is_general',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'media_price',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\MediaPrice',
            ),
          ),
        20 => array(
          'var' => 'sp_id',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'has_text',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'params',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'time_interval',
          'type' => TType::I32,
          ),
        24 => array(
          'var' => 'day_num',
          'type' => TType::I32,
          ),
        25 => array(
          'var' => 'show_num',
          'type' => TType::I32,
          ),
        26 => array(
          'var' => 'type_id',
          'type' => TType::I32,
          ),
        27 => array(
          'var' => 'show_js',
          'type' => TType::STRING,
          ),
        28 => array(
          'var' => 'click_js',
          'type' => TType::STRING,
          ),
        29 => array(
          'var' => 'is_first_page',
          'type' => TType::I32,
          ),
        30 => array(
          'var' => 'group_id',
          'type' => TType::I32,
          ),
        31 => array(
          'var' => 'budget',
          'type' => TType::DOUBLE,
          ),
        32 => array(
          'var' => 'plan_id',
          'type' => TType::I32,
          ),
        33 => array(
          'var' => 'smooth_control',
          'type' => TType::I32,
          ),
        34 => array(
          'var' => 'frequency_control',
          'type' => TType::I32,
          ),
        35 => array(
          'var' => 'day_cpm',
          'type' => TType::I32,
          ),
        36 => array(
          'var' => 'day_cpc',
          'type' => TType::I32,
          ),
        37 => array(
          'var' => 'user_agent',
          'type' => TType::STRING,
          ),
        38 => array(
          'var' => 'sp_list',
          'type' => TType::STRING,
          ),
        39 => array(
          'var' => 'viewtype4_ratio',
          'type' => TType::I32,
          ),
        40 => array(
          'var' => 'viewtype8_ratio',
          'type' => TType::I32,
          ),
        41 => array(
          'var' => 'terms',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        42 => array(
          'var' => 'mobile',
          'type' => TType::I32,
          ),
        43 => array(
          'var' => 'exchanges',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        44 => array(
          'var' => 'isdelay',
          'type' => TType::I32,
          ),
        45 => array(
          'var' => 'include_ip',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        46 => array(
          'var' => 'exclude_ip',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        47 => array(
          'var' => 'include_adsl',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        48 => array(
          'var' => 'exclude_adsl',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        49 => array(
          'var' => 'usertype',
          'type' => TType::I32,
          ),
        50 => array(
          'var' => 'usertags',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        51 => array(
          'var' => 'intervals',
          'type' => TType::STRING,
          ),
        52 => array(
          'var' => 'view_position',
          'type' => TType::I32,
          ),
        53 => array(
          'var' => 'view_time',
          'type' => TType::STRING,
          ),
        54 => array(
          'var' => 'webunion_org',
          'type' => TType::STRING,
          ),
        55 => array(
          'var' => 'webunion_text',
          'type' => TType::STRING,
          ),
        56 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        57 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        58 => array(
          'var' => 'domain_group_id',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        59 => array(
          'var' => 'channel_list',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        60 => array(
          'var' => 'adname',
          'type' => TType::STRING,
          ),
        61 => array(
          'var' => 'webunion_switch',
          'type' => TType::I32,
          ),
        62 => array(
          'var' => 'base_props',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        63 => array(
          'var' => 'residence_locations',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        64 => array(
          'var' => 'work_locations',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        65 => array(
          'var' => 'icon_addr',
          'type' => TType::STRING,
          ),
        66 => array(
          'var' => 'icon_width',
          'type' => TType::I32,
          ),
        67 => array(
          'var' => 'icon_height',
          'type' => TType::I32,
          ),
        68 => array(
          'var' => 'icon_mime_type',
          'type' => TType::STRING,
          ),
        69 => array(
          'var' => 'mime_type',
          'type' => TType::STRING,
          ),
        70 => array(
          'var' => 'duration',
          'type' => TType::I32,
          ),
        71 => array(
          'var' => 'bitrate',
          'type' => TType::I32,
          ),
        72 => array(
          'var' => 'frame_rate',
          'type' => TType::I32,
          ),
        73 => array(
          'var' => 'adsource',
          'type' => TType::I32,
          ),
        74 => array(
          'var' => 'contract_type',
          'type' => TType::I32,
          ),
        75 => array(
          'var' => 'deeplinkurl',
          'type' => TType::STRING,
          ),
        76 => array(
          'var' => 'logo_width',
          'type' => TType::I32,
          ),
        77 => array(
          'var' => 'logo_height',
          'type' => TType::I32,
          ),
        78 => array(
          'var' => 'logo_addr',
          'type' => TType::STRING,
          ),
        79 => array(
          'var' => 'ad_action',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ad_id'])) {
        $this->ad_id = $vals['ad_id'];
      }
      if (isset($vals['business_type'])) {
        $this->business_type = $vals['business_type'];
      }
      if (isset($vals['width'])) {
        $this->width = $vals['width'];
      }
      if (isset($vals['height'])) {
        $this->height = $vals['height'];
      }
      if (isset($vals['viewtype'])) {
        $this->viewtype = $vals['viewtype'];
      }
      if (isset($vals['priority'])) {
        $this->priority = $vals['priority'];
      }
      if (isset($vals['blackurl'])) {
        $this->blackurl = $vals['blackurl'];
      }
      if (isset($vals['whiteurl'])) {
        $this->whiteurl = $vals['whiteurl'];
      }
      if (isset($vals['regions'])) {
        $this->regions = $vals['regions'];
      }
      if (isset($vals['acceptflows'])) {
        $this->acceptflows = $vals['acceptflows'];
      }
      if (isset($vals['creative_type'])) {
        $this->creative_type = $vals['creative_type'];
      }
      if (isset($vals['ad_category'])) {
        $this->ad_category = $vals['ad_category'];
      }
      if (isset($vals['sensitive_category'])) {
        $this->sensitive_category = $vals['sensitive_category'];
      }
      if (isset($vals['click_through_url'])) {
        $this->click_through_url = $vals['click_through_url'];
      }
      if (isset($vals['destination_url'])) {
        $this->destination_url = $vals['destination_url'];
      }
      if (isset($vals['charge_type'])) {
        $this->charge_type = $vals['charge_type'];
      }
      if (isset($vals['charge_price'])) {
        $this->charge_price = $vals['charge_price'];
      }
      if (isset($vals['is_general'])) {
        $this->is_general = $vals['is_general'];
      }
      if (isset($vals['media_price'])) {
        $this->media_price = $vals['media_price'];
      }
      if (isset($vals['sp_id'])) {
        $this->sp_id = $vals['sp_id'];
      }
      if (isset($vals['has_text'])) {
        $this->has_text = $vals['has_text'];
      }
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['time_interval'])) {
        $this->time_interval = $vals['time_interval'];
      }
      if (isset($vals['day_num'])) {
        $this->day_num = $vals['day_num'];
      }
      if (isset($vals['show_num'])) {
        $this->show_num = $vals['show_num'];
      }
      if (isset($vals['type_id'])) {
        $this->type_id = $vals['type_id'];
      }
      if (isset($vals['show_js'])) {
        $this->show_js = $vals['show_js'];
      }
      if (isset($vals['click_js'])) {
        $this->click_js = $vals['click_js'];
      }
      if (isset($vals['is_first_page'])) {
        $this->is_first_page = $vals['is_first_page'];
      }
      if (isset($vals['group_id'])) {
        $this->group_id = $vals['group_id'];
      }
      if (isset($vals['budget'])) {
        $this->budget = $vals['budget'];
      }
      if (isset($vals['plan_id'])) {
        $this->plan_id = $vals['plan_id'];
      }
      if (isset($vals['smooth_control'])) {
        $this->smooth_control = $vals['smooth_control'];
      }
      if (isset($vals['frequency_control'])) {
        $this->frequency_control = $vals['frequency_control'];
      }
      if (isset($vals['day_cpm'])) {
        $this->day_cpm = $vals['day_cpm'];
      }
      if (isset($vals['day_cpc'])) {
        $this->day_cpc = $vals['day_cpc'];
      }
      if (isset($vals['user_agent'])) {
        $this->user_agent = $vals['user_agent'];
      }
      if (isset($vals['sp_list'])) {
        $this->sp_list = $vals['sp_list'];
      }
      if (isset($vals['viewtype4_ratio'])) {
        $this->viewtype4_ratio = $vals['viewtype4_ratio'];
      }
      if (isset($vals['viewtype8_ratio'])) {
        $this->viewtype8_ratio = $vals['viewtype8_ratio'];
      }
      if (isset($vals['terms'])) {
        $this->terms = $vals['terms'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['exchanges'])) {
        $this->exchanges = $vals['exchanges'];
      }
      if (isset($vals['isdelay'])) {
        $this->isdelay = $vals['isdelay'];
      }
      if (isset($vals['include_ip'])) {
        $this->include_ip = $vals['include_ip'];
      }
      if (isset($vals['exclude_ip'])) {
        $this->exclude_ip = $vals['exclude_ip'];
      }
      if (isset($vals['include_adsl'])) {
        $this->include_adsl = $vals['include_adsl'];
      }
      if (isset($vals['exclude_adsl'])) {
        $this->exclude_adsl = $vals['exclude_adsl'];
      }
      if (isset($vals['usertype'])) {
        $this->usertype = $vals['usertype'];
      }
      if (isset($vals['usertags'])) {
        $this->usertags = $vals['usertags'];
      }
      if (isset($vals['intervals'])) {
        $this->intervals = $vals['intervals'];
      }
      if (isset($vals['view_position'])) {
        $this->view_position = $vals['view_position'];
      }
      if (isset($vals['view_time'])) {
        $this->view_time = $vals['view_time'];
      }
      if (isset($vals['webunion_org'])) {
        $this->webunion_org = $vals['webunion_org'];
      }
      if (isset($vals['webunion_text'])) {
        $this->webunion_text = $vals['webunion_text'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['domain_group_id'])) {
        $this->domain_group_id = $vals['domain_group_id'];
      }
      if (isset($vals['channel_list'])) {
        $this->channel_list = $vals['channel_list'];
      }
      if (isset($vals['adname'])) {
        $this->adname = $vals['adname'];
      }
      if (isset($vals['webunion_switch'])) {
        $this->webunion_switch = $vals['webunion_switch'];
      }
      if (isset($vals['base_props'])) {
        $this->base_props = $vals['base_props'];
      }
      if (isset($vals['residence_locations'])) {
        $this->residence_locations = $vals['residence_locations'];
      }
      if (isset($vals['work_locations'])) {
        $this->work_locations = $vals['work_locations'];
      }
      if (isset($vals['icon_addr'])) {
        $this->icon_addr = $vals['icon_addr'];
      }
      if (isset($vals['icon_width'])) {
        $this->icon_width = $vals['icon_width'];
      }
      if (isset($vals['icon_height'])) {
        $this->icon_height = $vals['icon_height'];
      }
      if (isset($vals['icon_mime_type'])) {
        $this->icon_mime_type = $vals['icon_mime_type'];
      }
      if (isset($vals['mime_type'])) {
        $this->mime_type = $vals['mime_type'];
      }
      if (isset($vals['duration'])) {
        $this->duration = $vals['duration'];
      }
      if (isset($vals['bitrate'])) {
        $this->bitrate = $vals['bitrate'];
      }
      if (isset($vals['frame_rate'])) {
        $this->frame_rate = $vals['frame_rate'];
      }
      if (isset($vals['adsource'])) {
        $this->adsource = $vals['adsource'];
      }
      if (isset($vals['contract_type'])) {
        $this->contract_type = $vals['contract_type'];
      }
      if (isset($vals['deeplinkurl'])) {
        $this->deeplinkurl = $vals['deeplinkurl'];
      }
      if (isset($vals['logo_width'])) {
        $this->logo_width = $vals['logo_width'];
      }
      if (isset($vals['logo_height'])) {
        $this->logo_height = $vals['logo_height'];
      }
      if (isset($vals['logo_addr'])) {
        $this->logo_addr = $vals['logo_addr'];
      }
      if (isset($vals['ad_action'])) {
        $this->ad_action = $vals['ad_action'];
      }
    }
  }

  public function getName() {
    return 'AdData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ad_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->business_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->width);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->height);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->viewtype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priority);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->blackurl = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->blackurl []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->whiteurl = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readString($elem11);
              $this->whiteurl []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->regions = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $xfer += $input->readString($elem17);
              $this->regions []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->acceptflows = array();
            $_size18 = 0;
            $_etype21 = 0;
            $xfer += $input->readListBegin($_etype21, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $elem23 = null;
              $xfer += $input->readI32($elem23);
              $this->acceptflows []= $elem23;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->creative_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ad_category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sensitive_category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->click_through_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->destination_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->charge_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->charge_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->is_general);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::LST) {
            $this->media_price = array();
            $_size24 = 0;
            $_etype27 = 0;
            $xfer += $input->readListBegin($_etype27, $_size24);
            for ($_i28 = 0; $_i28 < $_size24; ++$_i28)
            {
              $elem29 = null;
              $elem29 = new \MediaPrice();
              $xfer += $elem29->read($input);
              $this->media_price []= $elem29;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sp_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->has_text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->params);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->time_interval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->day_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->show_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->show_js);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->click_js);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->is_first_page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->group_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->budget);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->plan_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->smooth_control);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->frequency_control);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->day_cpm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->day_cpc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 37:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user_agent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 38:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sp_list);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 39:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->viewtype4_ratio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->viewtype8_ratio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == TType::LST) {
            $this->terms = array();
            $_size30 = 0;
            $_etype33 = 0;
            $xfer += $input->readListBegin($_etype33, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $elem35 = null;
              $xfer += $input->readString($elem35);
              $this->terms []= $elem35;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 42:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 43:
          if ($ftype == TType::LST) {
            $this->exchanges = array();
            $_size36 = 0;
            $_etype39 = 0;
            $xfer += $input->readListBegin($_etype39, $_size36);
            for ($_i40 = 0; $_i40 < $_size36; ++$_i40)
            {
              $elem41 = null;
              $xfer += $input->readI32($elem41);
              $this->exchanges []= $elem41;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 44:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isdelay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 45:
          if ($ftype == TType::LST) {
            $this->include_ip = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $xfer += $input->readString($elem47);
              $this->include_ip []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 46:
          if ($ftype == TType::LST) {
            $this->exclude_ip = array();
            $_size48 = 0;
            $_etype51 = 0;
            $xfer += $input->readListBegin($_etype51, $_size48);
            for ($_i52 = 0; $_i52 < $_size48; ++$_i52)
            {
              $elem53 = null;
              $xfer += $input->readString($elem53);
              $this->exclude_ip []= $elem53;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 47:
          if ($ftype == TType::LST) {
            $this->include_adsl = array();
            $_size54 = 0;
            $_etype57 = 0;
            $xfer += $input->readListBegin($_etype57, $_size54);
            for ($_i58 = 0; $_i58 < $_size54; ++$_i58)
            {
              $elem59 = null;
              $xfer += $input->readString($elem59);
              $this->include_adsl []= $elem59;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 48:
          if ($ftype == TType::LST) {
            $this->exclude_adsl = array();
            $_size60 = 0;
            $_etype63 = 0;
            $xfer += $input->readListBegin($_etype63, $_size60);
            for ($_i64 = 0; $_i64 < $_size60; ++$_i64)
            {
              $elem65 = null;
              $xfer += $input->readString($elem65);
              $this->exclude_adsl []= $elem65;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 49:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->usertype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == TType::LST) {
            $this->usertags = array();
            $_size66 = 0;
            $_etype69 = 0;
            $xfer += $input->readListBegin($_etype69, $_size66);
            for ($_i70 = 0; $_i70 < $_size66; ++$_i70)
            {
              $elem71 = null;
              $xfer += $input->readString($elem71);
              $this->usertags []= $elem71;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 51:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->intervals);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 52:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->view_position);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 53:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->view_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 54:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->webunion_org);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 55:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->webunion_text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 56:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 57:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 58:
          if ($ftype == TType::LST) {
            $this->domain_group_id = array();
            $_size72 = 0;
            $_etype75 = 0;
            $xfer += $input->readListBegin($_etype75, $_size72);
            for ($_i76 = 0; $_i76 < $_size72; ++$_i76)
            {
              $elem77 = null;
              $xfer += $input->readI32($elem77);
              $this->domain_group_id []= $elem77;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 59:
          if ($ftype == TType::LST) {
            $this->channel_list = array();
            $_size78 = 0;
            $_etype81 = 0;
            $xfer += $input->readListBegin($_etype81, $_size78);
            for ($_i82 = 0; $_i82 < $_size78; ++$_i82)
            {
              $elem83 = null;
              $xfer += $input->readString($elem83);
              $this->channel_list []= $elem83;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 60:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->adname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 61:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->webunion_switch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 62:
          if ($ftype == TType::LST) {
            $this->base_props = array();
            $_size84 = 0;
            $_etype87 = 0;
            $xfer += $input->readListBegin($_etype87, $_size84);
            for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
            {
              $elem89 = null;
              $xfer += $input->readString($elem89);
              $this->base_props []= $elem89;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 63:
          if ($ftype == TType::LST) {
            $this->residence_locations = array();
            $_size90 = 0;
            $_etype93 = 0;
            $xfer += $input->readListBegin($_etype93, $_size90);
            for ($_i94 = 0; $_i94 < $_size90; ++$_i94)
            {
              $elem95 = null;
              $xfer += $input->readString($elem95);
              $this->residence_locations []= $elem95;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 64:
          if ($ftype == TType::LST) {
            $this->work_locations = array();
            $_size96 = 0;
            $_etype99 = 0;
            $xfer += $input->readListBegin($_etype99, $_size96);
            for ($_i100 = 0; $_i100 < $_size96; ++$_i100)
            {
              $elem101 = null;
              $xfer += $input->readString($elem101);
              $this->work_locations []= $elem101;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 65:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->icon_addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 66:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->icon_width);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 67:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->icon_height);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 68:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->icon_mime_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 69:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mime_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 70:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->duration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 71:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bitrate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 72:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->frame_rate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 73:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->adsource);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 74:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->contract_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 75:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deeplinkurl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 76:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->logo_width);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 77:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->logo_height);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 78:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->logo_addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 79:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ad_action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdData');
    if ($this->ad_id !== null) {
      $xfer += $output->writeFieldBegin('ad_id', TType::I32, 1);
      $xfer += $output->writeI32($this->ad_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->business_type !== null) {
      $xfer += $output->writeFieldBegin('business_type', TType::I32, 2);
      $xfer += $output->writeI32($this->business_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->width !== null) {
      $xfer += $output->writeFieldBegin('width', TType::I32, 3);
      $xfer += $output->writeI32($this->width);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->height !== null) {
      $xfer += $output->writeFieldBegin('height', TType::I32, 4);
      $xfer += $output->writeI32($this->height);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->viewtype !== null) {
      $xfer += $output->writeFieldBegin('viewtype', TType::I32, 5);
      $xfer += $output->writeI32($this->viewtype);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priority !== null) {
      $xfer += $output->writeFieldBegin('priority', TType::I32, 6);
      $xfer += $output->writeI32($this->priority);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blackurl !== null) {
      if (!is_array($this->blackurl)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('blackurl', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRING, count($this->blackurl));
        {
          foreach ($this->blackurl as $iter102)
          {
            $xfer += $output->writeString($iter102);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->whiteurl !== null) {
      if (!is_array($this->whiteurl)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('whiteurl', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRING, count($this->whiteurl));
        {
          foreach ($this->whiteurl as $iter103)
          {
            $xfer += $output->writeString($iter103);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regions !== null) {
      if (!is_array($this->regions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('regions', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRING, count($this->regions));
        {
          foreach ($this->regions as $iter104)
          {
            $xfer += $output->writeString($iter104);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->acceptflows !== null) {
      if (!is_array($this->acceptflows)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('acceptflows', TType::LST, 10);
      {
        $output->writeListBegin(TType::I32, count($this->acceptflows));
        {
          foreach ($this->acceptflows as $iter105)
          {
            $xfer += $output->writeI32($iter105);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creative_type !== null) {
      $xfer += $output->writeFieldBegin('creative_type', TType::I32, 11);
      $xfer += $output->writeI32($this->creative_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ad_category !== null) {
      $xfer += $output->writeFieldBegin('ad_category', TType::I32, 12);
      $xfer += $output->writeI32($this->ad_category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sensitive_category !== null) {
      $xfer += $output->writeFieldBegin('sensitive_category', TType::I32, 13);
      $xfer += $output->writeI32($this->sensitive_category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->click_through_url !== null) {
      $xfer += $output->writeFieldBegin('click_through_url', TType::STRING, 14);
      $xfer += $output->writeString($this->click_through_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destination_url !== null) {
      $xfer += $output->writeFieldBegin('destination_url', TType::STRING, 15);
      $xfer += $output->writeString($this->destination_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->charge_type !== null) {
      $xfer += $output->writeFieldBegin('charge_type', TType::I32, 16);
      $xfer += $output->writeI32($this->charge_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->charge_price !== null) {
      $xfer += $output->writeFieldBegin('charge_price', TType::DOUBLE, 17);
      $xfer += $output->writeDouble($this->charge_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_general !== null) {
      $xfer += $output->writeFieldBegin('is_general', TType::I32, 18);
      $xfer += $output->writeI32($this->is_general);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_price !== null) {
      if (!is_array($this->media_price)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('media_price', TType::LST, 19);
      {
        $output->writeListBegin(TType::STRUCT, count($this->media_price));
        {
          foreach ($this->media_price as $iter106)
          {
            $xfer += $iter106->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sp_id !== null) {
      $xfer += $output->writeFieldBegin('sp_id', TType::STRING, 20);
      $xfer += $output->writeString($this->sp_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->has_text !== null) {
      $xfer += $output->writeFieldBegin('has_text', TType::I32, 21);
      $xfer += $output->writeI32($this->has_text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->params !== null) {
      $xfer += $output->writeFieldBegin('params', TType::STRING, 22);
      $xfer += $output->writeString($this->params);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time_interval !== null) {
      $xfer += $output->writeFieldBegin('time_interval', TType::I32, 23);
      $xfer += $output->writeI32($this->time_interval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->day_num !== null) {
      $xfer += $output->writeFieldBegin('day_num', TType::I32, 24);
      $xfer += $output->writeI32($this->day_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->show_num !== null) {
      $xfer += $output->writeFieldBegin('show_num', TType::I32, 25);
      $xfer += $output->writeI32($this->show_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type_id !== null) {
      $xfer += $output->writeFieldBegin('type_id', TType::I32, 26);
      $xfer += $output->writeI32($this->type_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->show_js !== null) {
      $xfer += $output->writeFieldBegin('show_js', TType::STRING, 27);
      $xfer += $output->writeString($this->show_js);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->click_js !== null) {
      $xfer += $output->writeFieldBegin('click_js', TType::STRING, 28);
      $xfer += $output->writeString($this->click_js);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_first_page !== null) {
      $xfer += $output->writeFieldBegin('is_first_page', TType::I32, 29);
      $xfer += $output->writeI32($this->is_first_page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group_id !== null) {
      $xfer += $output->writeFieldBegin('group_id', TType::I32, 30);
      $xfer += $output->writeI32($this->group_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->budget !== null) {
      $xfer += $output->writeFieldBegin('budget', TType::DOUBLE, 31);
      $xfer += $output->writeDouble($this->budget);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->plan_id !== null) {
      $xfer += $output->writeFieldBegin('plan_id', TType::I32, 32);
      $xfer += $output->writeI32($this->plan_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->smooth_control !== null) {
      $xfer += $output->writeFieldBegin('smooth_control', TType::I32, 33);
      $xfer += $output->writeI32($this->smooth_control);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->frequency_control !== null) {
      $xfer += $output->writeFieldBegin('frequency_control', TType::I32, 34);
      $xfer += $output->writeI32($this->frequency_control);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->day_cpm !== null) {
      $xfer += $output->writeFieldBegin('day_cpm', TType::I32, 35);
      $xfer += $output->writeI32($this->day_cpm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->day_cpc !== null) {
      $xfer += $output->writeFieldBegin('day_cpc', TType::I32, 36);
      $xfer += $output->writeI32($this->day_cpc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_agent !== null) {
      $xfer += $output->writeFieldBegin('user_agent', TType::STRING, 37);
      $xfer += $output->writeString($this->user_agent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sp_list !== null) {
      $xfer += $output->writeFieldBegin('sp_list', TType::STRING, 38);
      $xfer += $output->writeString($this->sp_list);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->viewtype4_ratio !== null) {
      $xfer += $output->writeFieldBegin('viewtype4_ratio', TType::I32, 39);
      $xfer += $output->writeI32($this->viewtype4_ratio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->viewtype8_ratio !== null) {
      $xfer += $output->writeFieldBegin('viewtype8_ratio', TType::I32, 40);
      $xfer += $output->writeI32($this->viewtype8_ratio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->terms !== null) {
      if (!is_array($this->terms)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('terms', TType::LST, 41);
      {
        $output->writeListBegin(TType::STRING, count($this->terms));
        {
          foreach ($this->terms as $iter107)
          {
            $xfer += $output->writeString($iter107);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::I32, 42);
      $xfer += $output->writeI32($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exchanges !== null) {
      if (!is_array($this->exchanges)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('exchanges', TType::LST, 43);
      {
        $output->writeListBegin(TType::I32, count($this->exchanges));
        {
          foreach ($this->exchanges as $iter108)
          {
            $xfer += $output->writeI32($iter108);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isdelay !== null) {
      $xfer += $output->writeFieldBegin('isdelay', TType::I32, 44);
      $xfer += $output->writeI32($this->isdelay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->include_ip !== null) {
      if (!is_array($this->include_ip)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('include_ip', TType::LST, 45);
      {
        $output->writeListBegin(TType::STRING, count($this->include_ip));
        {
          foreach ($this->include_ip as $iter109)
          {
            $xfer += $output->writeString($iter109);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exclude_ip !== null) {
      if (!is_array($this->exclude_ip)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('exclude_ip', TType::LST, 46);
      {
        $output->writeListBegin(TType::STRING, count($this->exclude_ip));
        {
          foreach ($this->exclude_ip as $iter110)
          {
            $xfer += $output->writeString($iter110);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->include_adsl !== null) {
      if (!is_array($this->include_adsl)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('include_adsl', TType::LST, 47);
      {
        $output->writeListBegin(TType::STRING, count($this->include_adsl));
        {
          foreach ($this->include_adsl as $iter111)
          {
            $xfer += $output->writeString($iter111);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exclude_adsl !== null) {
      if (!is_array($this->exclude_adsl)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('exclude_adsl', TType::LST, 48);
      {
        $output->writeListBegin(TType::STRING, count($this->exclude_adsl));
        {
          foreach ($this->exclude_adsl as $iter112)
          {
            $xfer += $output->writeString($iter112);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usertype !== null) {
      $xfer += $output->writeFieldBegin('usertype', TType::I32, 49);
      $xfer += $output->writeI32($this->usertype);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usertags !== null) {
      if (!is_array($this->usertags)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('usertags', TType::LST, 50);
      {
        $output->writeListBegin(TType::STRING, count($this->usertags));
        {
          foreach ($this->usertags as $iter113)
          {
            $xfer += $output->writeString($iter113);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->intervals !== null) {
      $xfer += $output->writeFieldBegin('intervals', TType::STRING, 51);
      $xfer += $output->writeString($this->intervals);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->view_position !== null) {
      $xfer += $output->writeFieldBegin('view_position', TType::I32, 52);
      $xfer += $output->writeI32($this->view_position);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->view_time !== null) {
      $xfer += $output->writeFieldBegin('view_time', TType::STRING, 53);
      $xfer += $output->writeString($this->view_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->webunion_org !== null) {
      $xfer += $output->writeFieldBegin('webunion_org', TType::STRING, 54);
      $xfer += $output->writeString($this->webunion_org);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->webunion_text !== null) {
      $xfer += $output->writeFieldBegin('webunion_text', TType::STRING, 55);
      $xfer += $output->writeString($this->webunion_text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 56);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 57);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->domain_group_id !== null) {
      if (!is_array($this->domain_group_id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('domain_group_id', TType::LST, 58);
      {
        $output->writeListBegin(TType::I32, count($this->domain_group_id));
        {
          foreach ($this->domain_group_id as $iter114)
          {
            $xfer += $output->writeI32($iter114);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel_list !== null) {
      if (!is_array($this->channel_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('channel_list', TType::LST, 59);
      {
        $output->writeListBegin(TType::STRING, count($this->channel_list));
        {
          foreach ($this->channel_list as $iter115)
          {
            $xfer += $output->writeString($iter115);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->adname !== null) {
      $xfer += $output->writeFieldBegin('adname', TType::STRING, 60);
      $xfer += $output->writeString($this->adname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->webunion_switch !== null) {
      $xfer += $output->writeFieldBegin('webunion_switch', TType::I32, 61);
      $xfer += $output->writeI32($this->webunion_switch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->base_props !== null) {
      if (!is_array($this->base_props)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('base_props', TType::LST, 62);
      {
        $output->writeListBegin(TType::STRING, count($this->base_props));
        {
          foreach ($this->base_props as $iter116)
          {
            $xfer += $output->writeString($iter116);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->residence_locations !== null) {
      if (!is_array($this->residence_locations)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('residence_locations', TType::LST, 63);
      {
        $output->writeListBegin(TType::STRING, count($this->residence_locations));
        {
          foreach ($this->residence_locations as $iter117)
          {
            $xfer += $output->writeString($iter117);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->work_locations !== null) {
      if (!is_array($this->work_locations)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('work_locations', TType::LST, 64);
      {
        $output->writeListBegin(TType::STRING, count($this->work_locations));
        {
          foreach ($this->work_locations as $iter118)
          {
            $xfer += $output->writeString($iter118);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icon_addr !== null) {
      $xfer += $output->writeFieldBegin('icon_addr', TType::STRING, 65);
      $xfer += $output->writeString($this->icon_addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icon_width !== null) {
      $xfer += $output->writeFieldBegin('icon_width', TType::I32, 66);
      $xfer += $output->writeI32($this->icon_width);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icon_height !== null) {
      $xfer += $output->writeFieldBegin('icon_height', TType::I32, 67);
      $xfer += $output->writeI32($this->icon_height);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icon_mime_type !== null) {
      $xfer += $output->writeFieldBegin('icon_mime_type', TType::STRING, 68);
      $xfer += $output->writeString($this->icon_mime_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mime_type !== null) {
      $xfer += $output->writeFieldBegin('mime_type', TType::STRING, 69);
      $xfer += $output->writeString($this->mime_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->duration !== null) {
      $xfer += $output->writeFieldBegin('duration', TType::I32, 70);
      $xfer += $output->writeI32($this->duration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bitrate !== null) {
      $xfer += $output->writeFieldBegin('bitrate', TType::I32, 71);
      $xfer += $output->writeI32($this->bitrate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->frame_rate !== null) {
      $xfer += $output->writeFieldBegin('frame_rate', TType::I32, 72);
      $xfer += $output->writeI32($this->frame_rate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->adsource !== null) {
      $xfer += $output->writeFieldBegin('adsource', TType::I32, 73);
      $xfer += $output->writeI32($this->adsource);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contract_type !== null) {
      $xfer += $output->writeFieldBegin('contract_type', TType::I32, 74);
      $xfer += $output->writeI32($this->contract_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deeplinkurl !== null) {
      $xfer += $output->writeFieldBegin('deeplinkurl', TType::STRING, 75);
      $xfer += $output->writeString($this->deeplinkurl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logo_width !== null) {
      $xfer += $output->writeFieldBegin('logo_width', TType::I32, 76);
      $xfer += $output->writeI32($this->logo_width);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logo_height !== null) {
      $xfer += $output->writeFieldBegin('logo_height', TType::I32, 77);
      $xfer += $output->writeI32($this->logo_height);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logo_addr !== null) {
      $xfer += $output->writeFieldBegin('logo_addr', TType::STRING, 78);
      $xfer += $output->writeString($this->logo_addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ad_action !== null) {
      $xfer += $output->writeFieldBegin('ad_action', TType::I32, 79);
      $xfer += $output->writeI32($this->ad_action);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdVersion {
  static $_TSPEC;

  public $id = null;
  public $version = null;
  public $media_name = null;
  public $dataType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'media_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'dataType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['media_name'])) {
        $this->media_name = $vals['media_name'];
      }
      if (isset($vals['dataType'])) {
        $this->dataType = $vals['dataType'];
      }
    }
  }

  public function getName() {
    return 'AdVersion';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->media_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dataType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdVersion');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 2);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_name !== null) {
      $xfer += $output->writeFieldBegin('media_name', TType::STRING, 3);
      $xfer += $output->writeString($this->media_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataType !== null) {
      $xfer += $output->writeFieldBegin('dataType', TType::I32, 4);
      $xfer += $output->writeI32($this->dataType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


