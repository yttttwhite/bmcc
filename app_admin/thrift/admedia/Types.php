<?php


/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Media {
  static $_TSPEC;

  public $id = null;
  public $media_name = null;
  public $identification = null;
  public $media_type = null;
  public $career_type = null;
  public $reference_addr = null;
  public $media_status = null;
  public $comment = null;
  public $media_account = null;
  public $public_key = null;
  public $private_key = null;
  public $contact_name = null;
  public $contact_mobile = null;
  public $contact_email = null;
  public $contact_address = null;
  public $contact_zipcode = null;
  public $contact_website = null;
  public $contact_comment = null;
  public $create_time = null;
  public $alter_time = null;
  public $creator_id = null;
  public $available_uid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'media_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'identification',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'media_type',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'career_type',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'reference_addr',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'media_status',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'media_account',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'public_key',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'private_key',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'contact_name',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'contact_mobile',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'contact_email',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'contact_address',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'contact_zipcode',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'contact_website',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'contact_comment',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'create_time',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'alter_time',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'creator_id',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'available_uid',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['media_name'])) {
        $this->media_name = $vals['media_name'];
      }
      if (isset($vals['identification'])) {
        $this->identification = $vals['identification'];
      }
      if (isset($vals['media_type'])) {
        $this->media_type = $vals['media_type'];
      }
      if (isset($vals['career_type'])) {
        $this->career_type = $vals['career_type'];
      }
      if (isset($vals['reference_addr'])) {
        $this->reference_addr = $vals['reference_addr'];
      }
      if (isset($vals['media_status'])) {
        $this->media_status = $vals['media_status'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['media_account'])) {
        $this->media_account = $vals['media_account'];
      }
      if (isset($vals['public_key'])) {
        $this->public_key = $vals['public_key'];
      }
      if (isset($vals['private_key'])) {
        $this->private_key = $vals['private_key'];
      }
      if (isset($vals['contact_name'])) {
        $this->contact_name = $vals['contact_name'];
      }
      if (isset($vals['contact_mobile'])) {
        $this->contact_mobile = $vals['contact_mobile'];
      }
      if (isset($vals['contact_email'])) {
        $this->contact_email = $vals['contact_email'];
      }
      if (isset($vals['contact_address'])) {
        $this->contact_address = $vals['contact_address'];
      }
      if (isset($vals['contact_zipcode'])) {
        $this->contact_zipcode = $vals['contact_zipcode'];
      }
      if (isset($vals['contact_website'])) {
        $this->contact_website = $vals['contact_website'];
      }
      if (isset($vals['contact_comment'])) {
        $this->contact_comment = $vals['contact_comment'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
      if (isset($vals['alter_time'])) {
        $this->alter_time = $vals['alter_time'];
      }
      if (isset($vals['creator_id'])) {
        $this->creator_id = $vals['creator_id'];
      }
      if (isset($vals['available_uid'])) {
        $this->available_uid = $vals['available_uid'];
      }
    }
  }

  public function getName() {
    return 'Media';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->media_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->identification);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->media_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->career_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reference_addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->media_status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->media_account);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->public_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->private_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contact_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contact_mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contact_email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contact_address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contact_zipcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contact_website);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contact_comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->alter_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->creator_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->available_uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Media');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_name !== null) {
      $xfer += $output->writeFieldBegin('media_name', TType::STRING, 2);
      $xfer += $output->writeString($this->media_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identification !== null) {
      $xfer += $output->writeFieldBegin('identification', TType::STRING, 3);
      $xfer += $output->writeString($this->identification);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_type !== null) {
      $xfer += $output->writeFieldBegin('media_type', TType::STRING, 4);
      $xfer += $output->writeString($this->media_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->career_type !== null) {
      $xfer += $output->writeFieldBegin('career_type', TType::I32, 5);
      $xfer += $output->writeI32($this->career_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reference_addr !== null) {
      $xfer += $output->writeFieldBegin('reference_addr', TType::STRING, 6);
      $xfer += $output->writeString($this->reference_addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_status !== null) {
      $xfer += $output->writeFieldBegin('media_status', TType::I32, 7);
      $xfer += $output->writeI32($this->media_status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 8);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_account !== null) {
      $xfer += $output->writeFieldBegin('media_account', TType::STRING, 9);
      $xfer += $output->writeString($this->media_account);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->public_key !== null) {
      $xfer += $output->writeFieldBegin('public_key', TType::STRING, 10);
      $xfer += $output->writeString($this->public_key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->private_key !== null) {
      $xfer += $output->writeFieldBegin('private_key', TType::STRING, 11);
      $xfer += $output->writeString($this->private_key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contact_name !== null) {
      $xfer += $output->writeFieldBegin('contact_name', TType::STRING, 12);
      $xfer += $output->writeString($this->contact_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contact_mobile !== null) {
      $xfer += $output->writeFieldBegin('contact_mobile', TType::STRING, 13);
      $xfer += $output->writeString($this->contact_mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contact_email !== null) {
      $xfer += $output->writeFieldBegin('contact_email', TType::STRING, 14);
      $xfer += $output->writeString($this->contact_email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contact_address !== null) {
      $xfer += $output->writeFieldBegin('contact_address', TType::STRING, 15);
      $xfer += $output->writeString($this->contact_address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contact_zipcode !== null) {
      $xfer += $output->writeFieldBegin('contact_zipcode', TType::STRING, 16);
      $xfer += $output->writeString($this->contact_zipcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contact_website !== null) {
      $xfer += $output->writeFieldBegin('contact_website', TType::STRING, 17);
      $xfer += $output->writeString($this->contact_website);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contact_comment !== null) {
      $xfer += $output->writeFieldBegin('contact_comment', TType::STRING, 18);
      $xfer += $output->writeString($this->contact_comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::I32, 19);
      $xfer += $output->writeI32($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alter_time !== null) {
      $xfer += $output->writeFieldBegin('alter_time', TType::I32, 20);
      $xfer += $output->writeI32($this->alter_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creator_id !== null) {
      $xfer += $output->writeFieldBegin('creator_id', TType::I32, 21);
      $xfer += $output->writeI32($this->creator_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->available_uid !== null) {
      $xfer += $output->writeFieldBegin('available_uid', TType::STRING, 22);
      $xfer += $output->writeString($this->available_uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Channel {
  static $_TSPEC;

  public $channel_id = null;
  public $media_id = null;
  public $channel_name = null;
  public $channel_identification = null;
  public $channel_status = null;
  public $channel_comment = null;
  public $creator_id = null;
  public $create_time = null;
  public $alter_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'channel_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'media_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'channel_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'channel_identification',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'channel_status',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'channel_comment',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'creator_id',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'create_time',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'alter_time',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['channel_id'])) {
        $this->channel_id = $vals['channel_id'];
      }
      if (isset($vals['media_id'])) {
        $this->media_id = $vals['media_id'];
      }
      if (isset($vals['channel_name'])) {
        $this->channel_name = $vals['channel_name'];
      }
      if (isset($vals['channel_identification'])) {
        $this->channel_identification = $vals['channel_identification'];
      }
      if (isset($vals['channel_status'])) {
        $this->channel_status = $vals['channel_status'];
      }
      if (isset($vals['channel_comment'])) {
        $this->channel_comment = $vals['channel_comment'];
      }
      if (isset($vals['creator_id'])) {
        $this->creator_id = $vals['creator_id'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
      if (isset($vals['alter_time'])) {
        $this->alter_time = $vals['alter_time'];
      }
    }
  }

  public function getName() {
    return 'Channel';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->channel_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->media_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channel_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channel_identification);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->channel_status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->channel_comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->creator_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->alter_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Channel');
    if ($this->channel_id !== null) {
      $xfer += $output->writeFieldBegin('channel_id', TType::I32, 1);
      $xfer += $output->writeI32($this->channel_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_id !== null) {
      $xfer += $output->writeFieldBegin('media_id', TType::I32, 2);
      $xfer += $output->writeI32($this->media_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel_name !== null) {
      $xfer += $output->writeFieldBegin('channel_name', TType::STRING, 3);
      $xfer += $output->writeString($this->channel_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel_identification !== null) {
      $xfer += $output->writeFieldBegin('channel_identification', TType::STRING, 4);
      $xfer += $output->writeString($this->channel_identification);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel_status !== null) {
      $xfer += $output->writeFieldBegin('channel_status', TType::I32, 5);
      $xfer += $output->writeI32($this->channel_status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel_comment !== null) {
      $xfer += $output->writeFieldBegin('channel_comment', TType::STRING, 6);
      $xfer += $output->writeString($this->channel_comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creator_id !== null) {
      $xfer += $output->writeFieldBegin('creator_id', TType::I32, 7);
      $xfer += $output->writeI32($this->creator_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::I32, 8);
      $xfer += $output->writeI32($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alter_time !== null) {
      $xfer += $output->writeFieldBegin('alter_time', TType::I32, 9);
      $xfer += $output->writeI32($this->alter_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdPosition {
  static $_TSPEC;

  public $id = null;
  public $channel_id = null;
  public $position_name = null;
  public $position_identification = null;
  public $first_screen = null;
  public $stuff_type = null;
  public $width = null;
  public $height = null;
  public $cpm = null;
  public $cpc = null;
  public $status = null;
  public $position_comment = null;
  public $create_time = null;
  public $alter_time = null;
  public $creator_id = null;
  public $media_id = null;
  public $cpt = null;
  public $tag_identification = null;
  public $plan_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'channel_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'position_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'position_identification',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'first_screen',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'stuff_type',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'width',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'height',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'cpm',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'cpc',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'position_comment',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'create_time',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'alter_time',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'creator_id',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'media_id',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'cpt',
          'type' => TType::DOUBLE,
          ),
        18 => array(
          'var' => 'tag_identification',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'plan_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['channel_id'])) {
        $this->channel_id = $vals['channel_id'];
      }
      if (isset($vals['position_name'])) {
        $this->position_name = $vals['position_name'];
      }
      if (isset($vals['position_identification'])) {
        $this->position_identification = $vals['position_identification'];
      }
      if (isset($vals['first_screen'])) {
        $this->first_screen = $vals['first_screen'];
      }
      if (isset($vals['stuff_type'])) {
        $this->stuff_type = $vals['stuff_type'];
      }
      if (isset($vals['width'])) {
        $this->width = $vals['width'];
      }
      if (isset($vals['height'])) {
        $this->height = $vals['height'];
      }
      if (isset($vals['cpm'])) {
        $this->cpm = $vals['cpm'];
      }
      if (isset($vals['cpc'])) {
        $this->cpc = $vals['cpc'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['position_comment'])) {
        $this->position_comment = $vals['position_comment'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
      if (isset($vals['alter_time'])) {
        $this->alter_time = $vals['alter_time'];
      }
      if (isset($vals['creator_id'])) {
        $this->creator_id = $vals['creator_id'];
      }
      if (isset($vals['media_id'])) {
        $this->media_id = $vals['media_id'];
      }
      if (isset($vals['cpt'])) {
        $this->cpt = $vals['cpt'];
      }
      if (isset($vals['tag_identification'])) {
        $this->tag_identification = $vals['tag_identification'];
      }
      if (isset($vals['plan_id'])) {
        $this->plan_id = $vals['plan_id'];
      }
    }
  }

  public function getName() {
    return 'AdPosition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->channel_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->position_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->position_identification);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->first_screen);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stuff_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->width);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->height);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cpm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cpc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->position_comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->alter_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->creator_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->media_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cpt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tag_identification);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->plan_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdPosition');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel_id !== null) {
      $xfer += $output->writeFieldBegin('channel_id', TType::I32, 2);
      $xfer += $output->writeI32($this->channel_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->position_name !== null) {
      $xfer += $output->writeFieldBegin('position_name', TType::STRING, 3);
      $xfer += $output->writeString($this->position_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->position_identification !== null) {
      $xfer += $output->writeFieldBegin('position_identification', TType::STRING, 4);
      $xfer += $output->writeString($this->position_identification);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->first_screen !== null) {
      $xfer += $output->writeFieldBegin('first_screen', TType::I32, 5);
      $xfer += $output->writeI32($this->first_screen);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stuff_type !== null) {
      $xfer += $output->writeFieldBegin('stuff_type', TType::STRING, 6);
      $xfer += $output->writeString($this->stuff_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->width !== null) {
      $xfer += $output->writeFieldBegin('width', TType::I32, 7);
      $xfer += $output->writeI32($this->width);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->height !== null) {
      $xfer += $output->writeFieldBegin('height', TType::I32, 8);
      $xfer += $output->writeI32($this->height);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpm !== null) {
      $xfer += $output->writeFieldBegin('cpm', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->cpm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpc !== null) {
      $xfer += $output->writeFieldBegin('cpc', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->cpc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 11);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->position_comment !== null) {
      $xfer += $output->writeFieldBegin('position_comment', TType::STRING, 12);
      $xfer += $output->writeString($this->position_comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::I32, 13);
      $xfer += $output->writeI32($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alter_time !== null) {
      $xfer += $output->writeFieldBegin('alter_time', TType::I32, 14);
      $xfer += $output->writeI32($this->alter_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creator_id !== null) {
      $xfer += $output->writeFieldBegin('creator_id', TType::I32, 15);
      $xfer += $output->writeI32($this->creator_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_id !== null) {
      $xfer += $output->writeFieldBegin('media_id', TType::I32, 16);
      $xfer += $output->writeI32($this->media_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpt !== null) {
      $xfer += $output->writeFieldBegin('cpt', TType::DOUBLE, 17);
      $xfer += $output->writeDouble($this->cpt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tag_identification !== null) {
      $xfer += $output->writeFieldBegin('tag_identification', TType::STRING, 18);
      $xfer += $output->writeString($this->tag_identification);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->plan_id !== null) {
      $xfer += $output->writeFieldBegin('plan_id', TType::I32, 19);
      $xfer += $output->writeI32($this->plan_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


