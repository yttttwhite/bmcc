<?php


/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class AdInfo {
  static $_TSPEC;

  public $adid = null;
  public $adname = null;
  public $uid = null;
  public $group_id = null;
  public $plan_id = null;
  public $has_text = null;
  public $width = null;
  public $height = null;
  public $show_js = null;
  public $click_js = null;
  public $approvaldate = null;
  public $play_status =   1;
  public $media_type =   1;
  public $ctime = null;
  public $mtime = null;
  public $ad_price = null;
  public $view_type = null;
  public $colum1 = null;
  public $colum2 = null;
  public $media_name = null;
  public $version = null;
  public $time_interval = null;
  public $day_num = null;
  public $show_num = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'adid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'adname',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'group_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'plan_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'has_text',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'width',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'height',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'show_js',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'click_js',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'approvaldate',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'play_status',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'media_type',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'ctime',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'mtime',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'ad_price',
          'type' => TType::DOUBLE,
          ),
        17 => array(
          'var' => 'view_type',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'colum1',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'colum2',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'media_name',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'time_interval',
          'type' => TType::I32,
          ),
        23 => array(
          'var' => 'day_num',
          'type' => TType::I32,
          ),
        24 => array(
          'var' => 'show_num',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['adid'])) {
        $this->adid = $vals['adid'];
      }
      if (isset($vals['adname'])) {
        $this->adname = $vals['adname'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['group_id'])) {
        $this->group_id = $vals['group_id'];
      }
      if (isset($vals['plan_id'])) {
        $this->plan_id = $vals['plan_id'];
      }
      if (isset($vals['has_text'])) {
        $this->has_text = $vals['has_text'];
      }
      if (isset($vals['width'])) {
        $this->width = $vals['width'];
      }
      if (isset($vals['height'])) {
        $this->height = $vals['height'];
      }
      if (isset($vals['show_js'])) {
        $this->show_js = $vals['show_js'];
      }
      if (isset($vals['click_js'])) {
        $this->click_js = $vals['click_js'];
      }
      if (isset($vals['approvaldate'])) {
        $this->approvaldate = $vals['approvaldate'];
      }
      if (isset($vals['play_status'])) {
        $this->play_status = $vals['play_status'];
      }
      if (isset($vals['media_type'])) {
        $this->media_type = $vals['media_type'];
      }
      if (isset($vals['ctime'])) {
        $this->ctime = $vals['ctime'];
      }
      if (isset($vals['mtime'])) {
        $this->mtime = $vals['mtime'];
      }
      if (isset($vals['ad_price'])) {
        $this->ad_price = $vals['ad_price'];
      }
      if (isset($vals['view_type'])) {
        $this->view_type = $vals['view_type'];
      }
      if (isset($vals['colum1'])) {
        $this->colum1 = $vals['colum1'];
      }
      if (isset($vals['colum2'])) {
        $this->colum2 = $vals['colum2'];
      }
      if (isset($vals['media_name'])) {
        $this->media_name = $vals['media_name'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['time_interval'])) {
        $this->time_interval = $vals['time_interval'];
      }
      if (isset($vals['day_num'])) {
        $this->day_num = $vals['day_num'];
      }
      if (isset($vals['show_num'])) {
        $this->show_num = $vals['show_num'];
      }
    }
  }

  public function getName() {
    return 'AdInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->adid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->adname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->group_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->plan_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->has_text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->width);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->height);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->show_js);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->click_js);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->approvaldate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->play_status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->media_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ctime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ad_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->view_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->colum1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->colum2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->media_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->time_interval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->day_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->show_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdInfo');
    if ($this->adid !== null) {
      $xfer += $output->writeFieldBegin('adid', TType::I32, 1);
      $xfer += $output->writeI32($this->adid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->adname !== null) {
      $xfer += $output->writeFieldBegin('adname', TType::STRING, 2);
      $xfer += $output->writeString($this->adname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 3);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group_id !== null) {
      $xfer += $output->writeFieldBegin('group_id', TType::I32, 4);
      $xfer += $output->writeI32($this->group_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->plan_id !== null) {
      $xfer += $output->writeFieldBegin('plan_id', TType::I32, 5);
      $xfer += $output->writeI32($this->plan_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->has_text !== null) {
      $xfer += $output->writeFieldBegin('has_text', TType::I32, 6);
      $xfer += $output->writeI32($this->has_text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->width !== null) {
      $xfer += $output->writeFieldBegin('width', TType::I32, 7);
      $xfer += $output->writeI32($this->width);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->height !== null) {
      $xfer += $output->writeFieldBegin('height', TType::I32, 8);
      $xfer += $output->writeI32($this->height);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->show_js !== null) {
      $xfer += $output->writeFieldBegin('show_js', TType::STRING, 9);
      $xfer += $output->writeString($this->show_js);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->click_js !== null) {
      $xfer += $output->writeFieldBegin('click_js', TType::STRING, 10);
      $xfer += $output->writeString($this->click_js);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->approvaldate !== null) {
      $xfer += $output->writeFieldBegin('approvaldate', TType::I32, 11);
      $xfer += $output->writeI32($this->approvaldate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->play_status !== null) {
      $xfer += $output->writeFieldBegin('play_status', TType::I32, 12);
      $xfer += $output->writeI32($this->play_status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_type !== null) {
      $xfer += $output->writeFieldBegin('media_type', TType::I32, 13);
      $xfer += $output->writeI32($this->media_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ctime !== null) {
      $xfer += $output->writeFieldBegin('ctime', TType::I32, 14);
      $xfer += $output->writeI32($this->ctime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mtime !== null) {
      $xfer += $output->writeFieldBegin('mtime', TType::I32, 15);
      $xfer += $output->writeI32($this->mtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ad_price !== null) {
      $xfer += $output->writeFieldBegin('ad_price', TType::DOUBLE, 16);
      $xfer += $output->writeDouble($this->ad_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->view_type !== null) {
      $xfer += $output->writeFieldBegin('view_type', TType::I32, 17);
      $xfer += $output->writeI32($this->view_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->colum1 !== null) {
      $xfer += $output->writeFieldBegin('colum1', TType::I32, 18);
      $xfer += $output->writeI32($this->colum1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->colum2 !== null) {
      $xfer += $output->writeFieldBegin('colum2', TType::STRING, 19);
      $xfer += $output->writeString($this->colum2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_name !== null) {
      $xfer += $output->writeFieldBegin('media_name', TType::STRING, 20);
      $xfer += $output->writeString($this->media_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 21);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time_interval !== null) {
      $xfer += $output->writeFieldBegin('time_interval', TType::I32, 22);
      $xfer += $output->writeI32($this->time_interval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->day_num !== null) {
      $xfer += $output->writeFieldBegin('day_num', TType::I32, 23);
      $xfer += $output->writeI32($this->day_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->show_num !== null) {
      $xfer += $output->writeFieldBegin('show_num', TType::I32, 24);
      $xfer += $output->writeI32($this->show_num);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdInfoResponse {
  static $_TSPEC;

  public $totalSize = null;
  public $currentSize = null;
  public $pageSize = null;
  public $pageNumber = null;
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'totalSize',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'currentSize',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'pageNumber',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\AdInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['totalSize'])) {
        $this->totalSize = $vals['totalSize'];
      }
      if (isset($vals['currentSize'])) {
        $this->currentSize = $vals['currentSize'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['pageNumber'])) {
        $this->pageNumber = $vals['pageNumber'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'AdInfoResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->currentSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \AdInfo();
              $xfer += $elem5->read($input);
              $this->data []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdInfoResponse');
    if ($this->totalSize !== null) {
      $xfer += $output->writeFieldBegin('totalSize', TType::I32, 1);
      $xfer += $output->writeI32($this->totalSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentSize !== null) {
      $xfer += $output->writeFieldBegin('currentSize', TType::I32, 2);
      $xfer += $output->writeI32($this->currentSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 3);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageNumber !== null) {
      $xfer += $output->writeFieldBegin('pageNumber', TType::I32, 4);
      $xfer += $output->writeI32($this->pageNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


