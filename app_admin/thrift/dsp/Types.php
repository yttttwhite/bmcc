<?php


/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class SlotSize {
  static $_TSPEC;

  public $height = null;
  public $width = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'height',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'width',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['height'])) {
        $this->height = $vals['height'];
      }
      if (isset($vals['width'])) {
        $this->width = $vals['width'];
      }
    }
  }

  public function getName() {
    return 'SlotSize';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->height);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->width);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SlotSize');
    if ($this->height !== null) {
      $xfer += $output->writeFieldBegin('height', TType::I32, 1);
      $xfer += $output->writeI32($this->height);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->width !== null) {
      $xfer += $output->writeFieldBegin('width', TType::I32, 2);
      $xfer += $output->writeI32($this->width);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DSPInfo {
  static $_TSPEC;

  public $dsp_id = null;
  public $dsp_cms_url = null;
  public $dsp_bid_url = null;
  public $dsp_notice_url = null;
  public $dsp_max_qps = null;
  public $status = null;
  public $enabled = null;
  public $token = null;
  public $_inserttime = null;
  public $_updatetime = null;
  public $access_slot_size = null;
  public $access_view_types = null;
  public $access_view_screens = null;
  public $access_site_types = null;
  public $exclude_urls = null;
  public $_bid_ip = null;
  public $_bid_host = null;
  public $_bid_port = null;
  public $_bid_path = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dsp_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'dsp_cms_url',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'dsp_bid_url',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'dsp_notice_url',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'dsp_max_qps',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'enabled',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => '_inserttime',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => '_updatetime',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'access_slot_size',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SlotSize',
            ),
          ),
        12 => array(
          'var' => 'access_view_types',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        13 => array(
          'var' => 'access_view_screens',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        14 => array(
          'var' => 'access_site_types',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        15 => array(
          'var' => 'exclude_urls',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        16 => array(
          'var' => '_bid_ip',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => '_bid_host',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => '_bid_port',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => '_bid_path',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['dsp_id'])) {
        $this->dsp_id = $vals['dsp_id'];
      }
      if (isset($vals['dsp_cms_url'])) {
        $this->dsp_cms_url = $vals['dsp_cms_url'];
      }
      if (isset($vals['dsp_bid_url'])) {
        $this->dsp_bid_url = $vals['dsp_bid_url'];
      }
      if (isset($vals['dsp_notice_url'])) {
        $this->dsp_notice_url = $vals['dsp_notice_url'];
      }
      if (isset($vals['dsp_max_qps'])) {
        $this->dsp_max_qps = $vals['dsp_max_qps'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['enabled'])) {
        $this->enabled = $vals['enabled'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['_inserttime'])) {
        $this->_inserttime = $vals['_inserttime'];
      }
      if (isset($vals['_updatetime'])) {
        $this->_updatetime = $vals['_updatetime'];
      }
      if (isset($vals['access_slot_size'])) {
        $this->access_slot_size = $vals['access_slot_size'];
      }
      if (isset($vals['access_view_types'])) {
        $this->access_view_types = $vals['access_view_types'];
      }
      if (isset($vals['access_view_screens'])) {
        $this->access_view_screens = $vals['access_view_screens'];
      }
      if (isset($vals['access_site_types'])) {
        $this->access_site_types = $vals['access_site_types'];
      }
      if (isset($vals['exclude_urls'])) {
        $this->exclude_urls = $vals['exclude_urls'];
      }
      if (isset($vals['_bid_ip'])) {
        $this->_bid_ip = $vals['_bid_ip'];
      }
      if (isset($vals['_bid_host'])) {
        $this->_bid_host = $vals['_bid_host'];
      }
      if (isset($vals['_bid_port'])) {
        $this->_bid_port = $vals['_bid_port'];
      }
      if (isset($vals['_bid_path'])) {
        $this->_bid_path = $vals['_bid_path'];
      }
    }
  }

  public function getName() {
    return 'DSPInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dsp_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dsp_cms_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dsp_bid_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dsp_notice_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dsp_max_qps);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->enabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->_inserttime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->_updatetime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->access_slot_size = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \SlotSize();
              $xfer += $elem5->read($input);
              $this->access_slot_size []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->access_view_types = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readI32($elem11);
              $this->access_view_types []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::LST) {
            $this->access_view_screens = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $xfer += $input->readI32($elem17);
              $this->access_view_screens []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::LST) {
            $this->access_site_types = array();
            $_size18 = 0;
            $_etype21 = 0;
            $xfer += $input->readListBegin($_etype21, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $elem23 = null;
              $xfer += $input->readI32($elem23);
              $this->access_site_types []= $elem23;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::LST) {
            $this->exclude_urls = array();
            $_size24 = 0;
            $_etype27 = 0;
            $xfer += $input->readListBegin($_etype27, $_size24);
            for ($_i28 = 0; $_i28 < $_size24; ++$_i28)
            {
              $elem29 = null;
              $xfer += $input->readString($elem29);
              $this->exclude_urls []= $elem29;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->_bid_ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->_bid_host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->_bid_port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->_bid_path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DSPInfo');
    if ($this->dsp_id !== null) {
      $xfer += $output->writeFieldBegin('dsp_id', TType::I32, 1);
      $xfer += $output->writeI32($this->dsp_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dsp_cms_url !== null) {
      $xfer += $output->writeFieldBegin('dsp_cms_url', TType::STRING, 2);
      $xfer += $output->writeString($this->dsp_cms_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dsp_bid_url !== null) {
      $xfer += $output->writeFieldBegin('dsp_bid_url', TType::STRING, 3);
      $xfer += $output->writeString($this->dsp_bid_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dsp_notice_url !== null) {
      $xfer += $output->writeFieldBegin('dsp_notice_url', TType::STRING, 4);
      $xfer += $output->writeString($this->dsp_notice_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dsp_max_qps !== null) {
      $xfer += $output->writeFieldBegin('dsp_max_qps', TType::I32, 5);
      $xfer += $output->writeI32($this->dsp_max_qps);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 6);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enabled !== null) {
      $xfer += $output->writeFieldBegin('enabled', TType::I32, 7);
      $xfer += $output->writeI32($this->enabled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 8);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_inserttime !== null) {
      $xfer += $output->writeFieldBegin('_inserttime', TType::I32, 9);
      $xfer += $output->writeI32($this->_inserttime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_updatetime !== null) {
      $xfer += $output->writeFieldBegin('_updatetime', TType::I32, 10);
      $xfer += $output->writeI32($this->_updatetime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_slot_size !== null) {
      if (!is_array($this->access_slot_size)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('access_slot_size', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRUCT, count($this->access_slot_size));
        {
          foreach ($this->access_slot_size as $iter30)
          {
            $xfer += $iter30->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_view_types !== null) {
      if (!is_array($this->access_view_types)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('access_view_types', TType::LST, 12);
      {
        $output->writeListBegin(TType::I32, count($this->access_view_types));
        {
          foreach ($this->access_view_types as $iter31)
          {
            $xfer += $output->writeI32($iter31);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_view_screens !== null) {
      if (!is_array($this->access_view_screens)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('access_view_screens', TType::LST, 13);
      {
        $output->writeListBegin(TType::I32, count($this->access_view_screens));
        {
          foreach ($this->access_view_screens as $iter32)
          {
            $xfer += $output->writeI32($iter32);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_site_types !== null) {
      if (!is_array($this->access_site_types)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('access_site_types', TType::LST, 14);
      {
        $output->writeListBegin(TType::I32, count($this->access_site_types));
        {
          foreach ($this->access_site_types as $iter33)
          {
            $xfer += $output->writeI32($iter33);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exclude_urls !== null) {
      if (!is_array($this->exclude_urls)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('exclude_urls', TType::LST, 15);
      {
        $output->writeListBegin(TType::STRING, count($this->exclude_urls));
        {
          foreach ($this->exclude_urls as $iter34)
          {
            $xfer += $output->writeString($iter34);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_bid_ip !== null) {
      $xfer += $output->writeFieldBegin('_bid_ip', TType::STRING, 16);
      $xfer += $output->writeString($this->_bid_ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_bid_host !== null) {
      $xfer += $output->writeFieldBegin('_bid_host', TType::STRING, 17);
      $xfer += $output->writeString($this->_bid_host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_bid_port !== null) {
      $xfer += $output->writeFieldBegin('_bid_port', TType::I32, 18);
      $xfer += $output->writeI32($this->_bid_port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->_bid_path !== null) {
      $xfer += $output->writeFieldBegin('_bid_path', TType::STRING, 19);
      $xfer += $output->writeString($this->_bid_path);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


