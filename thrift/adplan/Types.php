<?php


/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class AdPlanType {
  static $_TSPEC;

  public $type_id = null;
  public $type_name = null;
  public $cate_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'type_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cate_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type_id'])) {
        $this->type_id = $vals['type_id'];
      }
      if (isset($vals['type_name'])) {
        $this->type_name = $vals['type_name'];
      }
      if (isset($vals['cate_name'])) {
        $this->cate_name = $vals['cate_name'];
      }
    }
  }

  public function getName() {
    return 'AdPlanType';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cate_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdPlanType');
    if ($this->type_id !== null) {
      $xfer += $output->writeFieldBegin('type_id', TType::I32, 1);
      $xfer += $output->writeI32($this->type_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type_name !== null) {
      $xfer += $output->writeFieldBegin('type_name', TType::STRING, 2);
      $xfer += $output->writeString($this->type_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cate_name !== null) {
      $xfer += $output->writeFieldBegin('cate_name', TType::STRING, 3);
      $xfer += $output->writeString($this->cate_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdPlan {
  static $_TSPEC;

  public $plan_id = null;
  public $plan_name = null;
  public $uid = null;
  public $vocation = null;
  public $billing_type =   1;
  public $budget = null;
  public $currency =   1;
  public $start_date = null;
  public $end_date = null;
  public $is_date_limit = null;
  public $day_max = null;
  public $adtime = null;
  public $enable =   1;
  public $ctime = null;
  public $mtime = null;
  public $pop_result = null;
  public $release_type =   20;
  public $smooth_control = null;
  public $priority =   3;
  public $net_type =   1;
  public $cpm = null;
  public $daily_consum = null;
  public $real_consum = null;
  public $cost = null;
  public $cpc = null;
  public $colum1 = null;
  public $colum2 = null;
  public $media_name = null;
  public $version = null;
  public $order_policy =   1;
  public $all_day_or_not = null;
  public $intervals = null;
  public $time_interval = null;
  public $day_num = null;
  public $show_num = null;
  public $type_id = null;
  public $verified_or_not = null;
  public $type_name = null;
  public $frequency_control = -1;
  public $day_cpm = -1;
  public $day_cpc = -1;
  public $user_name = null;
  public $total_cpm = -1;
  public $total_cpc = -1;
  public $last_operator = "Unknown";
  public $platform = 1;
  public $ad_pos_id = null;
  public $ctr_click_rate = null;
  public $bind_id = null;
  public $setting_price = null;
  public $cpt = null;
  public $total_cpt = null;
  public $tag_identification = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'plan_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'plan_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'vocation',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'billing_type',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'budget',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'currency',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'start_date',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'end_date',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'is_date_limit',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'day_max',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'adtime',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'enable',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'ctime',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'mtime',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'pop_result',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'release_type',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'smooth_control',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'priority',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'net_type',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'cpm',
          'type' => TType::DOUBLE,
          ),
        22 => array(
          'var' => 'daily_consum',
          'type' => TType::DOUBLE,
          ),
        23 => array(
          'var' => 'real_consum',
          'type' => TType::DOUBLE,
          ),
        24 => array(
          'var' => 'cost',
          'type' => TType::DOUBLE,
          ),
        25 => array(
          'var' => 'cpc',
          'type' => TType::DOUBLE,
          ),
        26 => array(
          'var' => 'colum1',
          'type' => TType::I32,
          ),
        27 => array(
          'var' => 'colum2',
          'type' => TType::STRING,
          ),
        28 => array(
          'var' => 'media_name',
          'type' => TType::STRING,
          ),
        29 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        30 => array(
          'var' => 'order_policy',
          'type' => TType::I32,
          ),
        31 => array(
          'var' => 'all_day_or_not',
          'type' => TType::I32,
          ),
        32 => array(
          'var' => 'intervals',
          'type' => TType::STRING,
          ),
        33 => array(
          'var' => 'time_interval',
          'type' => TType::I32,
          ),
        34 => array(
          'var' => 'day_num',
          'type' => TType::I32,
          ),
        35 => array(
          'var' => 'show_num',
          'type' => TType::I32,
          ),
        36 => array(
          'var' => 'type_id',
          'type' => TType::I32,
          ),
        37 => array(
          'var' => 'verified_or_not',
          'type' => TType::I32,
          ),
        38 => array(
          'var' => 'type_name',
          'type' => TType::STRING,
          ),
        39 => array(
          'var' => 'frequency_control',
          'type' => TType::I32,
          ),
        40 => array(
          'var' => 'day_cpm',
          'type' => TType::I32,
          ),
        41 => array(
          'var' => 'day_cpc',
          'type' => TType::I32,
          ),
        42 => array(
          'var' => 'user_name',
          'type' => TType::STRING,
          ),
        43 => array(
          'var' => 'total_cpm',
          'type' => TType::I32,
          ),
        44 => array(
          'var' => 'total_cpc',
          'type' => TType::I32,
          ),
        45 => array(
          'var' => 'last_operator',
          'type' => TType::STRING,
          ),
        46 => array(
          'var' => 'platform',
          'type' => TType::I32,
          ),
        47 => array(
          'var' => 'ad_pos_id',
          'type' => TType::I32,
          ),
        48 => array(
          'var' => 'ctr_click_rate',
          'type' => TType::DOUBLE,
          ),
        49 => array(
          'var' => 'bind_id',
          'type' => TType::I32,
          ),
        50 => array(
          'var' => 'setting_price',
          'type' => TType::DOUBLE,
          ),
        51 => array(
          'var' => 'cpt',
          'type' => TType::DOUBLE,
          ),
        52 => array(
          'var' => 'total_cpt',
          'type' => TType::I32,
          ),
        53 => array(
          'var' => 'tag_identification',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['plan_id'])) {
        $this->plan_id = $vals['plan_id'];
      }
      if (isset($vals['plan_name'])) {
        $this->plan_name = $vals['plan_name'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['vocation'])) {
        $this->vocation = $vals['vocation'];
      }
      if (isset($vals['billing_type'])) {
        $this->billing_type = $vals['billing_type'];
      }
      if (isset($vals['budget'])) {
        $this->budget = $vals['budget'];
      }
      if (isset($vals['currency'])) {
        $this->currency = $vals['currency'];
      }
      if (isset($vals['start_date'])) {
        $this->start_date = $vals['start_date'];
      }
      if (isset($vals['end_date'])) {
        $this->end_date = $vals['end_date'];
      }
      if (isset($vals['is_date_limit'])) {
        $this->is_date_limit = $vals['is_date_limit'];
      }
      if (isset($vals['day_max'])) {
        $this->day_max = $vals['day_max'];
      }
      if (isset($vals['adtime'])) {
        $this->adtime = $vals['adtime'];
      }
      if (isset($vals['enable'])) {
        $this->enable = $vals['enable'];
      }
      if (isset($vals['ctime'])) {
        $this->ctime = $vals['ctime'];
      }
      if (isset($vals['mtime'])) {
        $this->mtime = $vals['mtime'];
      }
      if (isset($vals['pop_result'])) {
        $this->pop_result = $vals['pop_result'];
      }
      if (isset($vals['release_type'])) {
        $this->release_type = $vals['release_type'];
      }
      if (isset($vals['smooth_control'])) {
        $this->smooth_control = $vals['smooth_control'];
      }
      if (isset($vals['priority'])) {
        $this->priority = $vals['priority'];
      }
      if (isset($vals['net_type'])) {
        $this->net_type = $vals['net_type'];
      }
      if (isset($vals['cpm'])) {
        $this->cpm = $vals['cpm'];
      }
      if (isset($vals['daily_consum'])) {
        $this->daily_consum = $vals['daily_consum'];
      }
      if (isset($vals['real_consum'])) {
        $this->real_consum = $vals['real_consum'];
      }
      if (isset($vals['cost'])) {
        $this->cost = $vals['cost'];
      }
      if (isset($vals['cpc'])) {
        $this->cpc = $vals['cpc'];
      }
      if (isset($vals['colum1'])) {
        $this->colum1 = $vals['colum1'];
      }
      if (isset($vals['colum2'])) {
        $this->colum2 = $vals['colum2'];
      }
      if (isset($vals['media_name'])) {
        $this->media_name = $vals['media_name'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['order_policy'])) {
        $this->order_policy = $vals['order_policy'];
      }
      if (isset($vals['all_day_or_not'])) {
        $this->all_day_or_not = $vals['all_day_or_not'];
      }
      if (isset($vals['intervals'])) {
        $this->intervals = $vals['intervals'];
      }
      if (isset($vals['time_interval'])) {
        $this->time_interval = $vals['time_interval'];
      }
      if (isset($vals['day_num'])) {
        $this->day_num = $vals['day_num'];
      }
      if (isset($vals['show_num'])) {
        $this->show_num = $vals['show_num'];
      }
      if (isset($vals['type_id'])) {
        $this->type_id = $vals['type_id'];
      }
      if (isset($vals['verified_or_not'])) {
        $this->verified_or_not = $vals['verified_or_not'];
      }
      if (isset($vals['type_name'])) {
        $this->type_name = $vals['type_name'];
      }
      if (isset($vals['frequency_control'])) {
        $this->frequency_control = $vals['frequency_control'];
      }
      if (isset($vals['day_cpm'])) {
        $this->day_cpm = $vals['day_cpm'];
      }
      if (isset($vals['day_cpc'])) {
        $this->day_cpc = $vals['day_cpc'];
      }
      if (isset($vals['user_name'])) {
        $this->user_name = $vals['user_name'];
      }
      if (isset($vals['total_cpm'])) {
        $this->total_cpm = $vals['total_cpm'];
      }
      if (isset($vals['total_cpc'])) {
        $this->total_cpc = $vals['total_cpc'];
      }
      if (isset($vals['last_operator'])) {
        $this->last_operator = $vals['last_operator'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['ad_pos_id'])) {
        $this->ad_pos_id = $vals['ad_pos_id'];
      }
      if (isset($vals['ctr_click_rate'])) {
        $this->ctr_click_rate = $vals['ctr_click_rate'];
      }
      if (isset($vals['bind_id'])) {
        $this->bind_id = $vals['bind_id'];
      }
      if (isset($vals['setting_price'])) {
        $this->setting_price = $vals['setting_price'];
      }
      if (isset($vals['cpt'])) {
        $this->cpt = $vals['cpt'];
      }
      if (isset($vals['total_cpt'])) {
        $this->total_cpt = $vals['total_cpt'];
      }
      if (isset($vals['tag_identification'])) {
        $this->tag_identification = $vals['tag_identification'];
      }
    }
  }

  public function getName() {
    return 'AdPlan';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->plan_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->plan_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vocation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->billing_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->budget);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->currency);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->start_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->end_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->is_date_limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->day_max);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->adtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->enable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ctime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pop_result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->release_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->smooth_control);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priority);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->net_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cpm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->daily_consum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->real_consum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cpc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->colum1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->colum2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->media_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->order_policy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->all_day_or_not);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->intervals);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->time_interval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->day_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->show_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 37:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->verified_or_not);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 38:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 39:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->frequency_control);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->day_cpm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->day_cpc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 42:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 43:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total_cpm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 44:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total_cpc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 45:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->last_operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 46:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 47:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ad_pos_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 48:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ctr_click_rate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 49:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bind_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->setting_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 51:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cpt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 52:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total_cpt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 53:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tag_identification);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdPlan');
    if ($this->plan_id !== null) {
      $xfer += $output->writeFieldBegin('plan_id', TType::I32, 1);
      $xfer += $output->writeI32($this->plan_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->plan_name !== null) {
      $xfer += $output->writeFieldBegin('plan_name', TType::STRING, 2);
      $xfer += $output->writeString($this->plan_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 3);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vocation !== null) {
      $xfer += $output->writeFieldBegin('vocation', TType::STRING, 4);
      $xfer += $output->writeString($this->vocation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->billing_type !== null) {
      $xfer += $output->writeFieldBegin('billing_type', TType::I32, 5);
      $xfer += $output->writeI32($this->billing_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->budget !== null) {
      $xfer += $output->writeFieldBegin('budget', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->budget);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currency !== null) {
      $xfer += $output->writeFieldBegin('currency', TType::I32, 7);
      $xfer += $output->writeI32($this->currency);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_date !== null) {
      $xfer += $output->writeFieldBegin('start_date', TType::I32, 8);
      $xfer += $output->writeI32($this->start_date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_date !== null) {
      $xfer += $output->writeFieldBegin('end_date', TType::I32, 9);
      $xfer += $output->writeI32($this->end_date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_date_limit !== null) {
      $xfer += $output->writeFieldBegin('is_date_limit', TType::I32, 10);
      $xfer += $output->writeI32($this->is_date_limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->day_max !== null) {
      $xfer += $output->writeFieldBegin('day_max', TType::I32, 11);
      $xfer += $output->writeI32($this->day_max);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->adtime !== null) {
      $xfer += $output->writeFieldBegin('adtime', TType::STRING, 12);
      $xfer += $output->writeString($this->adtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enable !== null) {
      $xfer += $output->writeFieldBegin('enable', TType::I32, 13);
      $xfer += $output->writeI32($this->enable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ctime !== null) {
      $xfer += $output->writeFieldBegin('ctime', TType::I32, 14);
      $xfer += $output->writeI32($this->ctime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mtime !== null) {
      $xfer += $output->writeFieldBegin('mtime', TType::I32, 15);
      $xfer += $output->writeI32($this->mtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pop_result !== null) {
      $xfer += $output->writeFieldBegin('pop_result', TType::I32, 16);
      $xfer += $output->writeI32($this->pop_result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->release_type !== null) {
      $xfer += $output->writeFieldBegin('release_type', TType::I32, 17);
      $xfer += $output->writeI32($this->release_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->smooth_control !== null) {
      $xfer += $output->writeFieldBegin('smooth_control', TType::I32, 18);
      $xfer += $output->writeI32($this->smooth_control);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priority !== null) {
      $xfer += $output->writeFieldBegin('priority', TType::I32, 19);
      $xfer += $output->writeI32($this->priority);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->net_type !== null) {
      $xfer += $output->writeFieldBegin('net_type', TType::I32, 20);
      $xfer += $output->writeI32($this->net_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpm !== null) {
      $xfer += $output->writeFieldBegin('cpm', TType::DOUBLE, 21);
      $xfer += $output->writeDouble($this->cpm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->daily_consum !== null) {
      $xfer += $output->writeFieldBegin('daily_consum', TType::DOUBLE, 22);
      $xfer += $output->writeDouble($this->daily_consum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->real_consum !== null) {
      $xfer += $output->writeFieldBegin('real_consum', TType::DOUBLE, 23);
      $xfer += $output->writeDouble($this->real_consum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cost !== null) {
      $xfer += $output->writeFieldBegin('cost', TType::DOUBLE, 24);
      $xfer += $output->writeDouble($this->cost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpc !== null) {
      $xfer += $output->writeFieldBegin('cpc', TType::DOUBLE, 25);
      $xfer += $output->writeDouble($this->cpc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->colum1 !== null) {
      $xfer += $output->writeFieldBegin('colum1', TType::I32, 26);
      $xfer += $output->writeI32($this->colum1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->colum2 !== null) {
      $xfer += $output->writeFieldBegin('colum2', TType::STRING, 27);
      $xfer += $output->writeString($this->colum2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_name !== null) {
      $xfer += $output->writeFieldBegin('media_name', TType::STRING, 28);
      $xfer += $output->writeString($this->media_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 29);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_policy !== null) {
      $xfer += $output->writeFieldBegin('order_policy', TType::I32, 30);
      $xfer += $output->writeI32($this->order_policy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->all_day_or_not !== null) {
      $xfer += $output->writeFieldBegin('all_day_or_not', TType::I32, 31);
      $xfer += $output->writeI32($this->all_day_or_not);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->intervals !== null) {
      $xfer += $output->writeFieldBegin('intervals', TType::STRING, 32);
      $xfer += $output->writeString($this->intervals);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time_interval !== null) {
      $xfer += $output->writeFieldBegin('time_interval', TType::I32, 33);
      $xfer += $output->writeI32($this->time_interval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->day_num !== null) {
      $xfer += $output->writeFieldBegin('day_num', TType::I32, 34);
      $xfer += $output->writeI32($this->day_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->show_num !== null) {
      $xfer += $output->writeFieldBegin('show_num', TType::I32, 35);
      $xfer += $output->writeI32($this->show_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type_id !== null) {
      $xfer += $output->writeFieldBegin('type_id', TType::I32, 36);
      $xfer += $output->writeI32($this->type_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verified_or_not !== null) {
      $xfer += $output->writeFieldBegin('verified_or_not', TType::I32, 37);
      $xfer += $output->writeI32($this->verified_or_not);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type_name !== null) {
      $xfer += $output->writeFieldBegin('type_name', TType::STRING, 38);
      $xfer += $output->writeString($this->type_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->frequency_control !== null) {
      $xfer += $output->writeFieldBegin('frequency_control', TType::I32, 39);
      $xfer += $output->writeI32($this->frequency_control);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->day_cpm !== null) {
      $xfer += $output->writeFieldBegin('day_cpm', TType::I32, 40);
      $xfer += $output->writeI32($this->day_cpm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->day_cpc !== null) {
      $xfer += $output->writeFieldBegin('day_cpc', TType::I32, 41);
      $xfer += $output->writeI32($this->day_cpc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_name !== null) {
      $xfer += $output->writeFieldBegin('user_name', TType::STRING, 42);
      $xfer += $output->writeString($this->user_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_cpm !== null) {
      $xfer += $output->writeFieldBegin('total_cpm', TType::I32, 43);
      $xfer += $output->writeI32($this->total_cpm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_cpc !== null) {
      $xfer += $output->writeFieldBegin('total_cpc', TType::I32, 44);
      $xfer += $output->writeI32($this->total_cpc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_operator !== null) {
      $xfer += $output->writeFieldBegin('last_operator', TType::STRING, 45);
      $xfer += $output->writeString($this->last_operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::I32, 46);
      $xfer += $output->writeI32($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ad_pos_id !== null) {
      $xfer += $output->writeFieldBegin('ad_pos_id', TType::I32, 47);
      $xfer += $output->writeI32($this->ad_pos_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ctr_click_rate !== null) {
      $xfer += $output->writeFieldBegin('ctr_click_rate', TType::DOUBLE, 48);
      $xfer += $output->writeDouble($this->ctr_click_rate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bind_id !== null) {
      $xfer += $output->writeFieldBegin('bind_id', TType::I32, 49);
      $xfer += $output->writeI32($this->bind_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->setting_price !== null) {
      $xfer += $output->writeFieldBegin('setting_price', TType::DOUBLE, 50);
      $xfer += $output->writeDouble($this->setting_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpt !== null) {
      $xfer += $output->writeFieldBegin('cpt', TType::DOUBLE, 51);
      $xfer += $output->writeDouble($this->cpt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_cpt !== null) {
      $xfer += $output->writeFieldBegin('total_cpt', TType::I32, 52);
      $xfer += $output->writeI32($this->total_cpt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tag_identification !== null) {
      $xfer += $output->writeFieldBegin('tag_identification', TType::STRING, 53);
      $xfer += $output->writeString($this->tag_identification);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdDetail {
  static $_TSPEC;

  public $adInfos = null;
  public $adGroups = null;
  public $stuffs = null;
  public $adPlan = null;
  public $username = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'adInfos',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\AdInfo',
            ),
          ),
        2 => array(
          'var' => 'adGroups',
          'type' => TType::STRUCT,
          'class' => '\AdGroup',
          ),
        3 => array(
          'var' => 'stuffs',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\StuffInfo',
            ),
          ),
        4 => array(
          'var' => 'adPlan',
          'type' => TType::STRUCT,
          'class' => '\AdPlan',
          ),
        5 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['adInfos'])) {
        $this->adInfos = $vals['adInfos'];
      }
      if (isset($vals['adGroups'])) {
        $this->adGroups = $vals['adGroups'];
      }
      if (isset($vals['stuffs'])) {
        $this->stuffs = $vals['stuffs'];
      }
      if (isset($vals['adPlan'])) {
        $this->adPlan = $vals['adPlan'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
    }
  }

  public function getName() {
    return 'AdDetail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->adInfos = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \AdInfo();
              $xfer += $elem5->read($input);
              $this->adInfos []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->adGroups = new \AdGroup();
            $xfer += $this->adGroups->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->stuffs = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $elem11 = new \StuffInfo();
              $xfer += $elem11->read($input);
              $this->stuffs []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->adPlan = new \AdPlan();
            $xfer += $this->adPlan->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdDetail');
    if ($this->adInfos !== null) {
      if (!is_array($this->adInfos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('adInfos', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->adInfos));
        {
          foreach ($this->adInfos as $iter12)
          {
            $xfer += $iter12->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->adGroups !== null) {
      if (!is_object($this->adGroups)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('adGroups', TType::STRUCT, 2);
      $xfer += $this->adGroups->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stuffs !== null) {
      if (!is_array($this->stuffs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stuffs', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->stuffs));
        {
          foreach ($this->stuffs as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->adPlan !== null) {
      if (!is_object($this->adPlan)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('adPlan', TType::STRUCT, 4);
      $xfer += $this->adPlan->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 5);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GroupResponse {
  static $_TSPEC;

  public $totalSize = null;
  public $currentSize = null;
  public $pageSize = null;
  public $pageNumber = null;
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'totalSize',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'currentSize',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'pageNumber',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\AdPlan',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['totalSize'])) {
        $this->totalSize = $vals['totalSize'];
      }
      if (isset($vals['currentSize'])) {
        $this->currentSize = $vals['currentSize'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['pageNumber'])) {
        $this->pageNumber = $vals['pageNumber'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GroupResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->currentSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \AdPlan();
              $xfer += $elem19->read($input);
              $this->data []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GroupResponse');
    if ($this->totalSize !== null) {
      $xfer += $output->writeFieldBegin('totalSize', TType::I32, 1);
      $xfer += $output->writeI32($this->totalSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentSize !== null) {
      $xfer += $output->writeFieldBegin('currentSize', TType::I32, 2);
      $xfer += $output->writeI32($this->currentSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 3);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageNumber !== null) {
      $xfer += $output->writeFieldBegin('pageNumber', TType::I32, 4);
      $xfer += $output->writeI32($this->pageNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdPlanResponse {
  static $_TSPEC;

  public $totalSize = null;
  public $currentSize = null;
  public $pageSize = null;
  public $pageNumber = null;
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'totalSize',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'currentSize',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'pageNumber',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\AdPlan',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['totalSize'])) {
        $this->totalSize = $vals['totalSize'];
      }
      if (isset($vals['currentSize'])) {
        $this->currentSize = $vals['currentSize'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['pageNumber'])) {
        $this->pageNumber = $vals['pageNumber'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'AdPlanResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->currentSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \AdPlan();
              $xfer += $elem26->read($input);
              $this->data []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdPlanResponse');
    if ($this->totalSize !== null) {
      $xfer += $output->writeFieldBegin('totalSize', TType::I32, 1);
      $xfer += $output->writeI32($this->totalSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentSize !== null) {
      $xfer += $output->writeFieldBegin('currentSize', TType::I32, 2);
      $xfer += $output->writeI32($this->currentSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 3);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageNumber !== null) {
      $xfer += $output->writeFieldBegin('pageNumber', TType::I32, 4);
      $xfer += $output->writeI32($this->pageNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


