<?php


/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class ORDER {
  const ASC = 1;
  const DESC = 2;
  static public $__names = array(
    1 => 'ASC',
    2 => 'DESC',
  );
}

class queryOptions {
  static $_TSPEC;

  public $id = null;
  public $startAt = null;
  public $endAt = null;
  public $areaid = array(
  );
  public $source =   0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'startAt',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'endAt',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'areaid',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'source',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['startAt'])) {
        $this->startAt = $vals['startAt'];
      }
      if (isset($vals['endAt'])) {
        $this->endAt = $vals['endAt'];
      }
      if (isset($vals['areaid'])) {
        $this->areaid = $vals['areaid'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
    }
  }

  public function getName() {
    return 'queryOptions';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->areaid = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->areaid []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('queryOptions');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startAt !== null) {
      $xfer += $output->writeFieldBegin('startAt', TType::STRING, 2);
      $xfer += $output->writeString($this->startAt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endAt !== null) {
      $xfer += $output->writeFieldBegin('endAt', TType::STRING, 3);
      $xfer += $output->writeString($this->endAt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->areaid !== null) {
      if (!is_array($this->areaid)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('areaid', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->areaid));
        {
          foreach ($this->areaid as $iter6)
          {
            $xfer += $output->writeString($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::I32, 5);
      $xfer += $output->writeI32($this->source);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class pageOptions {
  static $_TSPEC;

  public $pageNumber = 1;
  public $pageSize = 10;
  public $order =   1;
  public $orderBy = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageNumber',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'order',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'orderBy',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageNumber'])) {
        $this->pageNumber = $vals['pageNumber'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['order'])) {
        $this->order = $vals['order'];
      }
      if (isset($vals['orderBy'])) {
        $this->orderBy = $vals['orderBy'];
      }
    }
  }

  public function getName() {
    return 'pageOptions';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->order);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderBy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('pageOptions');
    if ($this->pageNumber !== null) {
      $xfer += $output->writeFieldBegin('pageNumber', TType::I32, 1);
      $xfer += $output->writeI32($this->pageNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 2);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order !== null) {
      $xfer += $output->writeFieldBegin('order', TType::I32, 3);
      $xfer += $output->writeI32($this->order);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderBy !== null) {
      $xfer += $output->writeFieldBegin('orderBy', TType::STRING, 4);
      $xfer += $output->writeString($this->orderBy);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Response {
  static $_TSPEC;

  public $id = null;
  public $push = null;
  public $show = null;
  public $click = null;
  public $cost = null;
  public $bid = null;
  public $bidres = null;
  public $selfcost = null;
  public $pv = null;
  public $pc = null;
  public $uv = null;
  public $uc = null;
  public $ipv = null;
  public $ipc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'push',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'show',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'click',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'cost',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'bid',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'bidres',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'selfcost',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'pv',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'pc',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'uv',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'uc',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'ipv',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'ipc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['push'])) {
        $this->push = $vals['push'];
      }
      if (isset($vals['show'])) {
        $this->show = $vals['show'];
      }
      if (isset($vals['click'])) {
        $this->click = $vals['click'];
      }
      if (isset($vals['cost'])) {
        $this->cost = $vals['cost'];
      }
      if (isset($vals['bid'])) {
        $this->bid = $vals['bid'];
      }
      if (isset($vals['bidres'])) {
        $this->bidres = $vals['bidres'];
      }
      if (isset($vals['selfcost'])) {
        $this->selfcost = $vals['selfcost'];
      }
      if (isset($vals['pv'])) {
        $this->pv = $vals['pv'];
      }
      if (isset($vals['pc'])) {
        $this->pc = $vals['pc'];
      }
      if (isset($vals['uv'])) {
        $this->uv = $vals['uv'];
      }
      if (isset($vals['uc'])) {
        $this->uc = $vals['uc'];
      }
      if (isset($vals['ipv'])) {
        $this->ipv = $vals['ipv'];
      }
      if (isset($vals['ipc'])) {
        $this->ipc = $vals['ipc'];
      }
    }
  }

  public function getName() {
    return 'Response';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->push);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->show);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->click);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bidres);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->selfcost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pv);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uv);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ipv);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ipc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Response');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->push !== null) {
      $xfer += $output->writeFieldBegin('push', TType::STRING, 2);
      $xfer += $output->writeString($this->push);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->show !== null) {
      $xfer += $output->writeFieldBegin('show', TType::STRING, 3);
      $xfer += $output->writeString($this->show);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->click !== null) {
      $xfer += $output->writeFieldBegin('click', TType::STRING, 4);
      $xfer += $output->writeString($this->click);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cost !== null) {
      $xfer += $output->writeFieldBegin('cost', TType::STRING, 5);
      $xfer += $output->writeString($this->cost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bid !== null) {
      $xfer += $output->writeFieldBegin('bid', TType::STRING, 6);
      $xfer += $output->writeString($this->bid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bidres !== null) {
      $xfer += $output->writeFieldBegin('bidres', TType::STRING, 7);
      $xfer += $output->writeString($this->bidres);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->selfcost !== null) {
      $xfer += $output->writeFieldBegin('selfcost', TType::STRING, 8);
      $xfer += $output->writeString($this->selfcost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pv !== null) {
      $xfer += $output->writeFieldBegin('pv', TType::STRING, 9);
      $xfer += $output->writeString($this->pv);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pc !== null) {
      $xfer += $output->writeFieldBegin('pc', TType::STRING, 10);
      $xfer += $output->writeString($this->pc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uv !== null) {
      $xfer += $output->writeFieldBegin('uv', TType::STRING, 11);
      $xfer += $output->writeString($this->uv);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uc !== null) {
      $xfer += $output->writeFieldBegin('uc', TType::STRING, 12);
      $xfer += $output->writeString($this->uc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ipv !== null) {
      $xfer += $output->writeFieldBegin('ipv', TType::STRING, 13);
      $xfer += $output->writeString($this->ipv);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ipc !== null) {
      $xfer += $output->writeFieldBegin('ipc', TType::STRING, 14);
      $xfer += $output->writeString($this->ipc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class reportResult {
  static $_TSPEC;

  public $totalSize = null;
  public $currentSize = null;
  public $totalPage = null;
  public $pageNumber = null;
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'totalSize',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'currentSize',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'totalPage',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'pageNumber',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Response',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['totalSize'])) {
        $this->totalSize = $vals['totalSize'];
      }
      if (isset($vals['currentSize'])) {
        $this->currentSize = $vals['currentSize'];
      }
      if (isset($vals['totalPage'])) {
        $this->totalPage = $vals['totalPage'];
      }
      if (isset($vals['pageNumber'])) {
        $this->pageNumber = $vals['pageNumber'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'reportResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->currentSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalPage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \Response();
              $xfer += $elem12->read($input);
              $this->data []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('reportResult');
    if ($this->totalSize !== null) {
      $xfer += $output->writeFieldBegin('totalSize', TType::I32, 1);
      $xfer += $output->writeI32($this->totalSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentSize !== null) {
      $xfer += $output->writeFieldBegin('currentSize', TType::I32, 2);
      $xfer += $output->writeI32($this->currentSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalPage !== null) {
      $xfer += $output->writeFieldBegin('totalPage', TType::I32, 3);
      $xfer += $output->writeI32($this->totalPage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageNumber !== null) {
      $xfer += $output->writeFieldBegin('pageNumber', TType::I32, 4);
      $xfer += $output->writeI32($this->pageNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


