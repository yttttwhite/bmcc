<?php


/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class AccountStatus {
  const NORMAL = 1;
  const FROZEN = 2;
  const ALL = -1;
  static public $__names = array(
    1 => 'NORMAL',
    2 => 'FROZEN',
    -1 => 'ALL',
  );
}

class AdUser {
  static $_TSPEC;

  public $uid = null;
  public $user_name = null;
  public $passwd = null;
  public $cell_phone = null;
  public $role_id = null;
  public $address = null;
  public $tel = null;
  public $user_local = null;
  public $account = null;
  public $zip_code = null;
  public $colum1 = null;
  public $colum2 = null;
  public $reg_time = null;
  public $host = null;
  public $account_status =   1;
  public $up_time = null;
  public $creator_id = null;
  public $type = 1;
  public $diffrate = 0;
  public $supportfee = 0;
  public $cpm_charge = 0;
  public $cpc_charge = 0;
  public $webunion_org = null;
  public $webunion_text = null;
  public $webunion_switch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'passwd',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'cell_phone',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'role_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'tel',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'user_local',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'account',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'zip_code',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'colum1',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'colum2',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'reg_time',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'host',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'account_status',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'up_time',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'creator_id',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'diffrate',
          'type' => TType::DOUBLE,
          ),
        20 => array(
          'var' => 'supportfee',
          'type' => TType::DOUBLE,
          ),
        21 => array(
          'var' => 'cpm_charge',
          'type' => TType::DOUBLE,
          ),
        22 => array(
          'var' => 'cpc_charge',
          'type' => TType::DOUBLE,
          ),
        23 => array(
          'var' => 'webunion_org',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'webunion_text',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'webunion_switch',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['user_name'])) {
        $this->user_name = $vals['user_name'];
      }
      if (isset($vals['passwd'])) {
        $this->passwd = $vals['passwd'];
      }
      if (isset($vals['cell_phone'])) {
        $this->cell_phone = $vals['cell_phone'];
      }
      if (isset($vals['role_id'])) {
        $this->role_id = $vals['role_id'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['tel'])) {
        $this->tel = $vals['tel'];
      }
      if (isset($vals['user_local'])) {
        $this->user_local = $vals['user_local'];
      }
      if (isset($vals['account'])) {
        $this->account = $vals['account'];
      }
      if (isset($vals['zip_code'])) {
        $this->zip_code = $vals['zip_code'];
      }
      if (isset($vals['colum1'])) {
        $this->colum1 = $vals['colum1'];
      }
      if (isset($vals['colum2'])) {
        $this->colum2 = $vals['colum2'];
      }
      if (isset($vals['reg_time'])) {
        $this->reg_time = $vals['reg_time'];
      }
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['account_status'])) {
        $this->account_status = $vals['account_status'];
      }
      if (isset($vals['up_time'])) {
        $this->up_time = $vals['up_time'];
      }
      if (isset($vals['creator_id'])) {
        $this->creator_id = $vals['creator_id'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['diffrate'])) {
        $this->diffrate = $vals['diffrate'];
      }
      if (isset($vals['supportfee'])) {
        $this->supportfee = $vals['supportfee'];
      }
      if (isset($vals['cpm_charge'])) {
        $this->cpm_charge = $vals['cpm_charge'];
      }
      if (isset($vals['cpc_charge'])) {
        $this->cpc_charge = $vals['cpc_charge'];
      }
      if (isset($vals['webunion_org'])) {
        $this->webunion_org = $vals['webunion_org'];
      }
      if (isset($vals['webunion_text'])) {
        $this->webunion_text = $vals['webunion_text'];
      }
      if (isset($vals['webunion_switch'])) {
        $this->webunion_switch = $vals['webunion_switch'];
      }
    }
  }

  public function getName() {
    return 'AdUser';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->passwd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cell_phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->role_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user_local);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->account);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->zip_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->colum1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->colum2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reg_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->account_status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->up_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->creator_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->diffrate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->supportfee);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cpm_charge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cpc_charge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->webunion_org);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->webunion_text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->webunion_switch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdUser');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 1);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_name !== null) {
      $xfer += $output->writeFieldBegin('user_name', TType::STRING, 2);
      $xfer += $output->writeString($this->user_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->passwd !== null) {
      $xfer += $output->writeFieldBegin('passwd', TType::STRING, 3);
      $xfer += $output->writeString($this->passwd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cell_phone !== null) {
      $xfer += $output->writeFieldBegin('cell_phone', TType::STRING, 4);
      $xfer += $output->writeString($this->cell_phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->role_id !== null) {
      $xfer += $output->writeFieldBegin('role_id', TType::I32, 5);
      $xfer += $output->writeI32($this->role_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 6);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tel !== null) {
      $xfer += $output->writeFieldBegin('tel', TType::STRING, 7);
      $xfer += $output->writeString($this->tel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_local !== null) {
      $xfer += $output->writeFieldBegin('user_local', TType::STRING, 8);
      $xfer += $output->writeString($this->user_local);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->account !== null) {
      $xfer += $output->writeFieldBegin('account', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->account);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zip_code !== null) {
      $xfer += $output->writeFieldBegin('zip_code', TType::STRING, 10);
      $xfer += $output->writeString($this->zip_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->colum1 !== null) {
      $xfer += $output->writeFieldBegin('colum1', TType::I32, 11);
      $xfer += $output->writeI32($this->colum1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->colum2 !== null) {
      $xfer += $output->writeFieldBegin('colum2', TType::STRING, 12);
      $xfer += $output->writeString($this->colum2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reg_time !== null) {
      $xfer += $output->writeFieldBegin('reg_time', TType::I32, 13);
      $xfer += $output->writeI32($this->reg_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 14);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->account_status !== null) {
      $xfer += $output->writeFieldBegin('account_status', TType::I32, 15);
      $xfer += $output->writeI32($this->account_status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->up_time !== null) {
      $xfer += $output->writeFieldBegin('up_time', TType::I32, 16);
      $xfer += $output->writeI32($this->up_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creator_id !== null) {
      $xfer += $output->writeFieldBegin('creator_id', TType::I32, 17);
      $xfer += $output->writeI32($this->creator_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 18);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->diffrate !== null) {
      $xfer += $output->writeFieldBegin('diffrate', TType::DOUBLE, 19);
      $xfer += $output->writeDouble($this->diffrate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supportfee !== null) {
      $xfer += $output->writeFieldBegin('supportfee', TType::DOUBLE, 20);
      $xfer += $output->writeDouble($this->supportfee);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpm_charge !== null) {
      $xfer += $output->writeFieldBegin('cpm_charge', TType::DOUBLE, 21);
      $xfer += $output->writeDouble($this->cpm_charge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpc_charge !== null) {
      $xfer += $output->writeFieldBegin('cpc_charge', TType::DOUBLE, 22);
      $xfer += $output->writeDouble($this->cpc_charge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->webunion_org !== null) {
      $xfer += $output->writeFieldBegin('webunion_org', TType::STRING, 23);
      $xfer += $output->writeString($this->webunion_org);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->webunion_text !== null) {
      $xfer += $output->writeFieldBegin('webunion_text', TType::STRING, 24);
      $xfer += $output->writeString($this->webunion_text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->webunion_switch !== null) {
      $xfer += $output->writeFieldBegin('webunion_switch', TType::I32, 25);
      $xfer += $output->writeI32($this->webunion_switch);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AccountFlow {
  static $_TSPEC;

  public $id = null;
  public $operator_id = null;
  public $target_uid = null;
  public $operate_num = null;
  public $operate_code = null;
  public $source = null;
  public $op_time = null;
  public $flow_money = null;
  public $history_money = null;
  public $note = null;
  public $business_id = null;
  public $contract_id = null;
  public $contract_file = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'operator_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'target_uid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'operate_num',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'operate_code',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'source',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'op_time',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'flow_money',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'history_money',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'note',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'business_id',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'contract_id',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'contract_file',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['operator_id'])) {
        $this->operator_id = $vals['operator_id'];
      }
      if (isset($vals['target_uid'])) {
        $this->target_uid = $vals['target_uid'];
      }
      if (isset($vals['operate_num'])) {
        $this->operate_num = $vals['operate_num'];
      }
      if (isset($vals['operate_code'])) {
        $this->operate_code = $vals['operate_code'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['op_time'])) {
        $this->op_time = $vals['op_time'];
      }
      if (isset($vals['flow_money'])) {
        $this->flow_money = $vals['flow_money'];
      }
      if (isset($vals['history_money'])) {
        $this->history_money = $vals['history_money'];
      }
      if (isset($vals['note'])) {
        $this->note = $vals['note'];
      }
      if (isset($vals['business_id'])) {
        $this->business_id = $vals['business_id'];
      }
      if (isset($vals['contract_id'])) {
        $this->contract_id = $vals['contract_id'];
      }
      if (isset($vals['contract_file'])) {
        $this->contract_file = $vals['contract_file'];
      }
    }
  }

  public function getName() {
    return 'AccountFlow';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->target_uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->operate_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operate_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->op_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->flow_money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->history_money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->note);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->business_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contract_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contract_file);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AccountFlow');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator_id !== null) {
      $xfer += $output->writeFieldBegin('operator_id', TType::I32, 2);
      $xfer += $output->writeI32($this->operator_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->target_uid !== null) {
      $xfer += $output->writeFieldBegin('target_uid', TType::I32, 3);
      $xfer += $output->writeI32($this->target_uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operate_num !== null) {
      $xfer += $output->writeFieldBegin('operate_num', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->operate_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operate_code !== null) {
      $xfer += $output->writeFieldBegin('operate_code', TType::I32, 5);
      $xfer += $output->writeI32($this->operate_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::I32, 6);
      $xfer += $output->writeI32($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->op_time !== null) {
      $xfer += $output->writeFieldBegin('op_time', TType::I32, 7);
      $xfer += $output->writeI32($this->op_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flow_money !== null) {
      $xfer += $output->writeFieldBegin('flow_money', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->flow_money);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->history_money !== null) {
      $xfer += $output->writeFieldBegin('history_money', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->history_money);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->note !== null) {
      $xfer += $output->writeFieldBegin('note', TType::STRING, 10);
      $xfer += $output->writeString($this->note);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->business_id !== null) {
      $xfer += $output->writeFieldBegin('business_id', TType::STRING, 11);
      $xfer += $output->writeString($this->business_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contract_id !== null) {
      $xfer += $output->writeFieldBegin('contract_id', TType::STRING, 12);
      $xfer += $output->writeString($this->contract_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contract_file !== null) {
      $xfer += $output->writeFieldBegin('contract_file', TType::STRING, 13);
      $xfer += $output->writeString($this->contract_file);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserBilling {
  static $_TSPEC;

  public $id = null;
  public $uid = null;
  public $user_name = null;
  public $charge_type = null;
  public $cpm_charge = null;
  public $cpc_charge = null;
  public $cpt_charge = null;
  public $cost = null;
  public $billing_date = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'user_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'charge_type',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'cpm_charge',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'cpc_charge',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'cpt_charge',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'cost',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'billing_date',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['user_name'])) {
        $this->user_name = $vals['user_name'];
      }
      if (isset($vals['charge_type'])) {
        $this->charge_type = $vals['charge_type'];
      }
      if (isset($vals['cpm_charge'])) {
        $this->cpm_charge = $vals['cpm_charge'];
      }
      if (isset($vals['cpc_charge'])) {
        $this->cpc_charge = $vals['cpc_charge'];
      }
      if (isset($vals['cpt_charge'])) {
        $this->cpt_charge = $vals['cpt_charge'];
      }
      if (isset($vals['cost'])) {
        $this->cost = $vals['cost'];
      }
      if (isset($vals['billing_date'])) {
        $this->billing_date = $vals['billing_date'];
      }
    }
  }

  public function getName() {
    return 'UserBilling';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->charge_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cpm_charge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cpc_charge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cpt_charge);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->cost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->billing_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserBilling');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 2);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_name !== null) {
      $xfer += $output->writeFieldBegin('user_name', TType::STRING, 3);
      $xfer += $output->writeString($this->user_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->charge_type !== null) {
      $xfer += $output->writeFieldBegin('charge_type', TType::I32, 4);
      $xfer += $output->writeI32($this->charge_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpm_charge !== null) {
      $xfer += $output->writeFieldBegin('cpm_charge', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->cpm_charge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpc_charge !== null) {
      $xfer += $output->writeFieldBegin('cpc_charge', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->cpc_charge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cpt_charge !== null) {
      $xfer += $output->writeFieldBegin('cpt_charge', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->cpt_charge);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cost !== null) {
      $xfer += $output->writeFieldBegin('cost', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->cost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->billing_date !== null) {
      $xfer += $output->writeFieldBegin('billing_date', TType::I32, 9);
      $xfer += $output->writeI32($this->billing_date);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


