<?php


/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class StuffInfo {
  static $_TSPEC;

  public $stuff_id = null;
  public $name = null;
  public $uid = null;
  public $adid = null;
  public $width = null;
  public $height = null;
  public $type =   1;
  public $title = null;
  public $desc = null;
  public $addr = null;
  public $thumb = null;
  public $crop = null;
  public $landing_page = null;
  public $enabled =   1;
  public $ctime = null;
  public $mtime = null;
  public $size = null;
  public $media_name = null;
  public $version = null;
  public $verified_or_not = null;
  public $group_id = null;
  public $plan_id = null;
  public $group_name = null;
  public $plan_name = null;
  public $text = null;
  public $audits = null;
  public $landing_rule = null;
  public $exchages_audit = null;
  public $landing_page_reachable = null;
  public $last_operator = "Unknown";
  public $icon_addr = null;
  public $icon_width = null;
  public $icon_height = null;
  public $icon_mime_type = null;
  public $mime_type = null;
  public $duration = null;
  public $bitrate = null;
  public $frame_rate = null;
  public $ftp_addr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'stuff_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'adid',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'width',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'height',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'addr',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'thumb',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'crop',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'landing_page',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'enabled',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'ctime',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'mtime',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'size',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'media_name',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'verified_or_not',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'group_id',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'plan_id',
          'type' => TType::I32,
          ),
        23 => array(
          'var' => 'group_name',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'plan_name',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        26 => array(
          'var' => 'audits',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        27 => array(
          'var' => 'landing_rule',
          'type' => TType::I32,
          ),
        28 => array(
          'var' => 'exchages_audit',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        29 => array(
          'var' => 'landing_page_reachable',
          'type' => TType::I32,
          ),
        30 => array(
          'var' => 'last_operator',
          'type' => TType::STRING,
          ),
        31 => array(
          'var' => 'icon_addr',
          'type' => TType::STRING,
          ),
        32 => array(
          'var' => 'icon_width',
          'type' => TType::I32,
          ),
        33 => array(
          'var' => 'icon_height',
          'type' => TType::I32,
          ),
        34 => array(
          'var' => 'icon_mime_type',
          'type' => TType::STRING,
          ),
        35 => array(
          'var' => 'mime_type',
          'type' => TType::STRING,
          ),
        36 => array(
          'var' => 'duration',
          'type' => TType::I32,
          ),
        37 => array(
          'var' => 'bitrate',
          'type' => TType::I32,
          ),
        38 => array(
          'var' => 'frame_rate',
          'type' => TType::I32,
          ),
        39 => array(
          'var' => 'ftp_addr',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['stuff_id'])) {
        $this->stuff_id = $vals['stuff_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['adid'])) {
        $this->adid = $vals['adid'];
      }
      if (isset($vals['width'])) {
        $this->width = $vals['width'];
      }
      if (isset($vals['height'])) {
        $this->height = $vals['height'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['addr'])) {
        $this->addr = $vals['addr'];
      }
      if (isset($vals['thumb'])) {
        $this->thumb = $vals['thumb'];
      }
      if (isset($vals['crop'])) {
        $this->crop = $vals['crop'];
      }
      if (isset($vals['landing_page'])) {
        $this->landing_page = $vals['landing_page'];
      }
      if (isset($vals['enabled'])) {
        $this->enabled = $vals['enabled'];
      }
      if (isset($vals['ctime'])) {
        $this->ctime = $vals['ctime'];
      }
      if (isset($vals['mtime'])) {
        $this->mtime = $vals['mtime'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['media_name'])) {
        $this->media_name = $vals['media_name'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['verified_or_not'])) {
        $this->verified_or_not = $vals['verified_or_not'];
      }
      if (isset($vals['group_id'])) {
        $this->group_id = $vals['group_id'];
      }
      if (isset($vals['plan_id'])) {
        $this->plan_id = $vals['plan_id'];
      }
      if (isset($vals['group_name'])) {
        $this->group_name = $vals['group_name'];
      }
      if (isset($vals['plan_name'])) {
        $this->plan_name = $vals['plan_name'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['audits'])) {
        $this->audits = $vals['audits'];
      }
      if (isset($vals['landing_rule'])) {
        $this->landing_rule = $vals['landing_rule'];
      }
      if (isset($vals['exchages_audit'])) {
        $this->exchages_audit = $vals['exchages_audit'];
      }
      if (isset($vals['landing_page_reachable'])) {
        $this->landing_page_reachable = $vals['landing_page_reachable'];
      }
      if (isset($vals['last_operator'])) {
        $this->last_operator = $vals['last_operator'];
      }
      if (isset($vals['icon_addr'])) {
        $this->icon_addr = $vals['icon_addr'];
      }
      if (isset($vals['icon_width'])) {
        $this->icon_width = $vals['icon_width'];
      }
      if (isset($vals['icon_height'])) {
        $this->icon_height = $vals['icon_height'];
      }
      if (isset($vals['icon_mime_type'])) {
        $this->icon_mime_type = $vals['icon_mime_type'];
      }
      if (isset($vals['mime_type'])) {
        $this->mime_type = $vals['mime_type'];
      }
      if (isset($vals['duration'])) {
        $this->duration = $vals['duration'];
      }
      if (isset($vals['bitrate'])) {
        $this->bitrate = $vals['bitrate'];
      }
      if (isset($vals['frame_rate'])) {
        $this->frame_rate = $vals['frame_rate'];
      }
      if (isset($vals['ftp_addr'])) {
        $this->ftp_addr = $vals['ftp_addr'];
      }
    }
  }

  public function getName() {
    return 'StuffInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->stuff_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->adid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->width);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->height);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thumb);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->crop);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->landing_page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->enabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ctime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->media_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->verified_or_not);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->group_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->plan_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->group_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->plan_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::MAP) {
            $this->audits = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = 0;
              $val6 = 0;
              $xfer += $input->readI32($key5);
              $xfer += $input->readI32($val6);
              $this->audits[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->landing_rule);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::MAP) {
            $this->exchages_audit = array();
            $_size7 = 0;
            $_ktype8 = 0;
            $_vtype9 = 0;
            $xfer += $input->readMapBegin($_ktype8, $_vtype9, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $key12 = 0;
              $val13 = array();
              $xfer += $input->readI32($key12);
              $val13 = array();
              $_size14 = 0;
              $_ktype15 = 0;
              $_vtype16 = 0;
              $xfer += $input->readMapBegin($_ktype15, $_vtype16, $_size14);
              for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
              {
                $key19 = '';
                $val20 = '';
                $xfer += $input->readString($key19);
                $xfer += $input->readString($val20);
                $val13[$key19] = $val20;
              }
              $xfer += $input->readMapEnd();
              $this->exchages_audit[$key12] = $val13;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->landing_page_reachable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->last_operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->icon_addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->icon_width);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->icon_height);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->icon_mime_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mime_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->duration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 37:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bitrate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 38:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->frame_rate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 39:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ftp_addr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StuffInfo');
    if ($this->stuff_id !== null) {
      $xfer += $output->writeFieldBegin('stuff_id', TType::I32, 1);
      $xfer += $output->writeI32($this->stuff_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 3);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->adid !== null) {
      $xfer += $output->writeFieldBegin('adid', TType::I32, 4);
      $xfer += $output->writeI32($this->adid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->width !== null) {
      $xfer += $output->writeFieldBegin('width', TType::I32, 5);
      $xfer += $output->writeI32($this->width);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->height !== null) {
      $xfer += $output->writeFieldBegin('height', TType::I32, 6);
      $xfer += $output->writeI32($this->height);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 7);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 8);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 9);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addr !== null) {
      $xfer += $output->writeFieldBegin('addr', TType::STRING, 10);
      $xfer += $output->writeString($this->addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumb !== null) {
      $xfer += $output->writeFieldBegin('thumb', TType::STRING, 11);
      $xfer += $output->writeString($this->thumb);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->crop !== null) {
      $xfer += $output->writeFieldBegin('crop', TType::STRING, 12);
      $xfer += $output->writeString($this->crop);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->landing_page !== null) {
      $xfer += $output->writeFieldBegin('landing_page', TType::STRING, 13);
      $xfer += $output->writeString($this->landing_page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enabled !== null) {
      $xfer += $output->writeFieldBegin('enabled', TType::I32, 14);
      $xfer += $output->writeI32($this->enabled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ctime !== null) {
      $xfer += $output->writeFieldBegin('ctime', TType::I32, 15);
      $xfer += $output->writeI32($this->ctime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mtime !== null) {
      $xfer += $output->writeFieldBegin('mtime', TType::I32, 16);
      $xfer += $output->writeI32($this->mtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I32, 17);
      $xfer += $output->writeI32($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->media_name !== null) {
      $xfer += $output->writeFieldBegin('media_name', TType::STRING, 18);
      $xfer += $output->writeString($this->media_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 19);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verified_or_not !== null) {
      $xfer += $output->writeFieldBegin('verified_or_not', TType::I32, 20);
      $xfer += $output->writeI32($this->verified_or_not);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group_id !== null) {
      $xfer += $output->writeFieldBegin('group_id', TType::I32, 21);
      $xfer += $output->writeI32($this->group_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->plan_id !== null) {
      $xfer += $output->writeFieldBegin('plan_id', TType::I32, 22);
      $xfer += $output->writeI32($this->plan_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group_name !== null) {
      $xfer += $output->writeFieldBegin('group_name', TType::STRING, 23);
      $xfer += $output->writeString($this->group_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->plan_name !== null) {
      $xfer += $output->writeFieldBegin('plan_name', TType::STRING, 24);
      $xfer += $output->writeString($this->plan_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 25);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->audits !== null) {
      if (!is_array($this->audits)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('audits', TType::MAP, 26);
      {
        $output->writeMapBegin(TType::I32, TType::I32, count($this->audits));
        {
          foreach ($this->audits as $kiter21 => $viter22)
          {
            $xfer += $output->writeI32($kiter21);
            $xfer += $output->writeI32($viter22);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->landing_rule !== null) {
      $xfer += $output->writeFieldBegin('landing_rule', TType::I32, 27);
      $xfer += $output->writeI32($this->landing_rule);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exchages_audit !== null) {
      if (!is_array($this->exchages_audit)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('exchages_audit', TType::MAP, 28);
      {
        $output->writeMapBegin(TType::I32, TType::MAP, count($this->exchages_audit));
        {
          foreach ($this->exchages_audit as $kiter23 => $viter24)
          {
            $xfer += $output->writeI32($kiter23);
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($viter24));
              {
                foreach ($viter24 as $kiter25 => $viter26)
                {
                  $xfer += $output->writeString($kiter25);
                  $xfer += $output->writeString($viter26);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->landing_page_reachable !== null) {
      $xfer += $output->writeFieldBegin('landing_page_reachable', TType::I32, 29);
      $xfer += $output->writeI32($this->landing_page_reachable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_operator !== null) {
      $xfer += $output->writeFieldBegin('last_operator', TType::STRING, 30);
      $xfer += $output->writeString($this->last_operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icon_addr !== null) {
      $xfer += $output->writeFieldBegin('icon_addr', TType::STRING, 31);
      $xfer += $output->writeString($this->icon_addr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icon_width !== null) {
      $xfer += $output->writeFieldBegin('icon_width', TType::I32, 32);
      $xfer += $output->writeI32($this->icon_width);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icon_height !== null) {
      $xfer += $output->writeFieldBegin('icon_height', TType::I32, 33);
      $xfer += $output->writeI32($this->icon_height);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icon_mime_type !== null) {
      $xfer += $output->writeFieldBegin('icon_mime_type', TType::STRING, 34);
      $xfer += $output->writeString($this->icon_mime_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mime_type !== null) {
      $xfer += $output->writeFieldBegin('mime_type', TType::STRING, 35);
      $xfer += $output->writeString($this->mime_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->duration !== null) {
      $xfer += $output->writeFieldBegin('duration', TType::I32, 36);
      $xfer += $output->writeI32($this->duration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bitrate !== null) {
      $xfer += $output->writeFieldBegin('bitrate', TType::I32, 37);
      $xfer += $output->writeI32($this->bitrate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->frame_rate !== null) {
      $xfer += $output->writeFieldBegin('frame_rate', TType::I32, 38);
      $xfer += $output->writeI32($this->frame_rate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ftp_addr !== null) {
      $xfer += $output->writeFieldBegin('ftp_addr', TType::STRING, 39);
      $xfer += $output->writeString($this->ftp_addr);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class StuffResponse {
  static $_TSPEC;

  public $totalSize = null;
  public $currentSize = null;
  public $pageSize = null;
  public $pageNumber = null;
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'totalSize',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'currentSize',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'pageNumber',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\StuffInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['totalSize'])) {
        $this->totalSize = $vals['totalSize'];
      }
      if (isset($vals['currentSize'])) {
        $this->currentSize = $vals['currentSize'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['pageNumber'])) {
        $this->pageNumber = $vals['pageNumber'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'StuffResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->currentSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size27 = 0;
            $_etype30 = 0;
            $xfer += $input->readListBegin($_etype30, $_size27);
            for ($_i31 = 0; $_i31 < $_size27; ++$_i31)
            {
              $elem32 = null;
              $elem32 = new \StuffInfo();
              $xfer += $elem32->read($input);
              $this->data []= $elem32;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StuffResponse');
    if ($this->totalSize !== null) {
      $xfer += $output->writeFieldBegin('totalSize', TType::I32, 1);
      $xfer += $output->writeI32($this->totalSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentSize !== null) {
      $xfer += $output->writeFieldBegin('currentSize', TType::I32, 2);
      $xfer += $output->writeI32($this->currentSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 3);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageNumber !== null) {
      $xfer += $output->writeFieldBegin('pageNumber', TType::I32, 4);
      $xfer += $output->writeI32($this->pageNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter33)
          {
            $xfer += $iter33->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


